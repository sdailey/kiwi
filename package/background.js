// Generated by CoffeeScript 1.9.0
(function() {
  var CLEANUP_INTERVAL, autoOffTimerExpired_orOff_withoutURLoverride, checkForNewDefaultUserPreferenceAttributes_thenProceedWithInitCheck, checkForUrlHourInterval, checkForUrl_Persistent_ChromeNotification_HourInterval, check_updateServiceResults, defaultServicesInfo, defaultUserPreferences, dispatchGnewsQuery, dispatchGnewsQuery__customSearch, dispatchProductHuntQuery__customSearch, dispatchQuery, dispatchQuery__customSearch, doesURLmatchSubstringLists, getRandom, getUrlResults_to_refreshBadgeIcon, initIfNewURL, initialize, is_url_blocked, is_url_whitelisted, kiwi_autoOffClearInterval, kiwi_customSearchResults, kiwi_productHunt_token_refresh_interval, kiwi_reddit_token_refresh_interval, kiwi_urlsResultsCache, kiwi_userMessages, last_periodicCleanup, maxUrlResultsStoredInLocalStorage, newsSearch, onGoogleLoad, parseResults, periodicCleanup, popupOpen, popupParcel, proceedWithPreInitCheck, queryThrottleSeconds, randomishDeviceId, randomizeDefaultConversationSiteOrder, reduceHashByHalf, refreshBadge, requestProductHuntOauthToken, requestRedditOathToken, returnNumberOfActiveServices, sendParcel, send_kiwi_userMessage, serviceQueryTimestamps, setAutoOffTimer, setPreppedServiceResults, setPreppedServiceResults__customSearch, setTimeout_forProductHuntRefresh, setTimeout_forRedditRefresh, shuffle_array, tabTitleObject, tabUrl, tempResponsesStore, temp__kiwi_productHunt_oauth, temp__kiwi_reddit_oauth, turnResearchModeOff, updateBadgeText, __randomishStringPadding, _exact_match_url_check, _save_a_la_carte, _save_from_popupParcel, _save_historyBlob, _save_url_results, _set_popupParcel;

  tabUrl = '';

  tabTitleObject = null;

  popupOpen = false;

  checkForUrlHourInterval = 16;

  checkForUrl_Persistent_ChromeNotification_HourInterval = 3;

  last_periodicCleanup = 0;

  CLEANUP_INTERVAL = 3 * 3600000;

  queryThrottleSeconds = 3;

  serviceQueryTimestamps = {};

  maxUrlResultsStoredInLocalStorage = 800;

  kiwi_urlsResultsCache = {};

  kiwi_customSearchResults = {};

  kiwi_userMessages = {
    "redditDown": {
      "baseValue": "reddit's API is unavailable, so results may not appear from this service for some time",
      "name": "redditDown",
      "sentAndAcknowledgedInstanceObjects": []
    },
    "productHuntDown": {
      "name": "productHuntDown",
      "baseValue": "Product Hunt's API has not been consistently available, so results may not reliably appear from this service.",
      "sentAndAcknowledgedInstanceObjects": []
    },
    "productHuntDown__customSearch": {
      "name": "productHuntDown__customSearch",
      "baseValue": "Product Hunt's custom search API has not been consistently available, so results may not reliably appear from this service.",
      "sentAndAcknowledgedInstanceObjects": []
    },
    "hackerNewsDown": {
      "name": "hackerNewsDown",
      "baseValue": "Hacker News' API has not been consistently available, so results may not reliably appear from this service.",
      "sentAndAcknowledgedInstanceObjects": []
    },
    "generalConnectionFailure": {
      "name": "generalConnectionFailure",
      "baseValue": "There has been a network connection issue. Check your internet connection / try again in a few minutes :)",
      "sentAndAcknowledgedInstanceObjects": []
    }
  };

  kiwi_autoOffClearInterval = null;

  kiwi_reddit_token_refresh_interval = null;

  kiwi_productHunt_token_refresh_interval = null;

  tempResponsesStore = {};

  popupParcel = {};

  defaultUserPreferences = {
    fontSize: .8,
    researchModeOnOff: 'off',
    autoOffAtUTCmilliTimestamp: null,
    autoOffTimerType: 'always',
    autoOffTimerValue: null,
    installedTime: Date.now(),
    sortByPref: 'attention',
    urlSubstring_whitelists: {
      anyMatch: [],
      beginsWith: [],
      endingIn: [],
      unless: []
    },
    urlSubstring_blacklists: {
      anyMatch: ['facebook.com', 'news.ycombinator.com', 'reddit.com', 'imgur.com', 'www.google.com', 'docs.google', 'drive.google', 'accounts.google', '.slack.com/', '//t.co', '//bit.ly', '//goo.gl', '//mail.google', '//mail.yahoo.com', 'hotmail.com', 'outlook.com', '/wp-admin', 'chrome://', 'chrome-extension://', 'chrome-devtools://'],
      beginsWith: ["about:", 'chrome://'],
      endingIn: ['youtube.com'],
      unless: [['twitter.com/', '/status/']]
    }
  };

  defaultServicesInfo = [
    {
      name: "hackerNews",
      title: "Hacker News",
      abbreviation: "H",
      queryApi: "https://hn.algolia.com/api/v1/search?restrictSearchableAttributes=url&query=",
      broughtToYouByTitle: "Algolia Hacker News API",
      broughtToYouByURL: "https://hn.algolia.com/api",
      brandingImage: null,
      brandingSlogan: null,
      permalinkBase: 'https://news.ycombinator.com/item?id=',
      userPageBaselink: 'https://news.ycombinator.com/user?id=',
      submitTitle: 'Be the first to submit on Hacker News!',
      submitUrl: 'https://news.ycombinator.com/submit',
      active: 'on',
      notableConditions: {
        hoursSincePosted: 4,
        num_comments: 10
      },
      updateBadgeOnlyWithExactMatch: true,
      customSearchApi: "https://hn.algolia.com/api/v1/search?query=",
      customSearchBroughtToYouByURL: null,
      customSearchBroughtToYouByTitle: null,
      customSearchTags__convention: {
        'string': '&tags=',
        'delimeter': ','
      },
      customSearchTags: {
        story: {
          title: "stories",
          string: "story",
          include: true
        },
        commentPolls: {
          title: "comments or polls",
          string: "(comment,poll,pollopt)",
          include: false
        },
        showHnAskHn: {
          title: "Show HN or Ask HN",
          string: "(show_hn,ask_hn)",
          include: false
        }
      },
      conversationSite: true
    }, {
      name: "reddit",
      title: "reddit",
      abbreviation: "R",
      queryApi: "https://www.reddit.com/submit.json?url=",
      broughtToYouByTitle: "Reddit API",
      broughtToYouByURL: "https://github.com/reddit/reddit/wiki/API",
      brandingImage: null,
      brandingSlogan: null,
      permalinkBase: 'https://www.reddit.com',
      userPageBaselink: 'https://www.reddit.com/user/',
      submitTitle: 'Be the first to submit on Reddit!',
      submitUrl: 'https://www.reddit.com/submit',
      active: 'on',
      notableConditions: {
        hoursSincePosted: 1,
        num_comments: 30
      },
      updateBadgeOnlyWithExactMatch: true,
      customSearchApi: "https://www.reddit.com/search.json?q=",
      customSearchTags: {},
      customSearchBroughtToYouByURL: null,
      customSearchBroughtToYouByTitle: null,
      conversationSite: true
    }, {
      name: "productHunt",
      title: "Product Hunt",
      abbreviation: "P",
      queryApi: "https://api.producthunt.com/v1/posts/all?search[url]=",
      broughtToYouByTitle: "Product Hunt API",
      broughtToYouByURL: "https://github.com/producthunt/producthunt-api/wiki/Product-Hunt-APIs",
      brandingImage: "product-hunt-logo-orange-240.png",
      brandingSlogan: null,
      permalinkBase: 'https://producthunt.com/',
      userPageBaselink: 'https://www.producthunt.com/@',
      submitTitle: 'Be the first to submit to Product Hunt!',
      submitUrl: 'https://www.producthunt.com/tech/new',
      active: 'on',
      notableConditions: {
        hoursSincePosted: 4,
        num_comments: 10
      },
      updateBadgeOnlyWithExactMatch: true,
      customSearchApi: "",
      customSearchTags: {},
      customSearchBroughtToYouByURL: "https://www.algolia.com/doc/javascript",
      customSearchBroughtToYouByTitle: "Algolia's Search API",
      conversationSite: true
    }, {
      name: "gnews",
      title: "Google News",
      abbreviation: "G",
      broughtToYouByTitle: "Google News Search",
      broughtToYouByURL: "https://developers.google.com/news-search/v1/devguide",
      brandingImage: null,
      brandingSlogan: "powered by Google",
      conversationSite: false,
      permalinkBase: '',
      userPageBaselink: '',
      active: 'on',
      submitTitle: null,
      submitUrl: null,
      notableConditions: {
        numberOfRelatedItemsWithClusterURL: 2,
        numberOfStoriesFoundWithinTheHoursSincePostedLimit: 4,
        hoursSincePosted: 3
      },
      customSearchTags: {},
      customSearchBroughtToYouByURL: null,
      customSearchBroughtToYouByTitle: null,
      conversationSite: false
    }
  ];

  send_kiwi_userMessage = function(messageName, urgencyLevel, extraNote) {
    var currentTime, messageObj, sendMessageBool, sentInstance, _i, _len, _ref;
    if (extraNote == null) {
      extraNote = null;
    }
    currentTime = Date.now();
    sendMessageBool = true;
    messageObj = kiwi_userMessages[messageName];
    _ref = messageObj.sentAndAcknowledgedInstanceObjects;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sentInstance = _ref[_i];
      if ((sentInstance.userAcknowledged != null) && (currentTime - sentInstance.userAcknowledged < 1000 * 60 * 20)) {
        sendMessageBool = false;
      } else if (sentInstance.userAcknowledged == null) {
        sendMessageBool = false;
      }
    }
    if (sendMessageBool === true) {
      kiwi_userMessages[messageName].sentAndAcknowledgedInstanceObjects.push({
        "sentTimestamp": currentTime,
        "userAcknowledged": null
      });
      if (kiwi_urlsResultsCache[tabUrl] != null) {
        return _set_popupParcel(kiwi_urlsResultsCache[tabUrl], tabUrl, true);
      } else if ((tempResponsesStore != null) && tempResponsesStore.forUrl === tabUrl) {
        return _set_popupParcel(tempResponsesStore.services, tabUrl, true);
      } else {
        return _set_popupParcel({}, tabUrl, true);
      }
    }
  };

  getRandom = function(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  shuffle_array = function(array) {
    var currentIndex, randomIndex, temporaryValue;
    currentIndex = array.length;
    while (0 !== currentIndex) {
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }
    return array;
  };

  randomishDeviceId = function() {
    var characterCounter, randomASCIIcharcode, randomClientLength, randomString;
    randomClientLength = getRandom(21, 29);
    characterCounter = 0;
    randomString = "";
    while (characterCounter <= randomClientLength) {
      characterCounter++;
      randomASCIIcharcode = getRandom(33, 125);
      randomString += String.fromCharCode(randomASCIIcharcode);
    }
    return randomString;
  };

  temp__kiwi_reddit_oauth = {
    token: null,
    token_type: null,
    token_lifespan_timestamp: null,
    client_id: "",
    device_id: randomishDeviceId()
  };

  temp__kiwi_productHunt_oauth = {
    token: null,
    token_type: null,
    token_lifespan_timestamp: null,
    client_id: "",
    client_secret: ""
  };

  randomizeDefaultConversationSiteOrder = function() {
    var conversationSiteServices, newDefaultServices, nonConversationSiteServices, service, _i, _len;
    conversationSiteServices = [];
    nonConversationSiteServices = [];
    for (_i = 0, _len = defaultServicesInfo.length; _i < _len; _i++) {
      service = defaultServicesInfo[_i];
      if (service.conversationSite) {
        conversationSiteServices.push(service);
      } else {
        nonConversationSiteServices.push(service);
      }
    }
    newDefaultServices = [];
    conversationSiteServices = shuffle_array(conversationSiteServices);
    return defaultServicesInfo = conversationSiteServices.concat(nonConversationSiteServices);
  };

  randomizeDefaultConversationSiteOrder();

  setTimeout_forProductHuntRefresh = function(token_timestamp, kiwi_productHunt_oauth, ignoreTimeoutDelayComparison) {
    var currentTime, timeoutDelay, timeoutIntervalId;
    if (ignoreTimeoutDelayComparison == null) {
      ignoreTimeoutDelayComparison = false;
    }
    currentTime = Date.now();
    timeoutDelay = token_timestamp - currentTime;
    if ((kiwi_productHunt_token_refresh_interval != null) && (kiwi_productHunt_token_refresh_interval.timestamp != null) && ignoreTimeoutDelayComparison === false) {
      if (timeoutDelay > kiwi_productHunt_token_refresh_interval.timestamp - currentTime) {
        return 0;
      }
    }
    if ((kiwi_productHunt_token_refresh_interval != null) && (kiwi_productHunt_token_refresh_interval.timestamp != null)) {
      clearTimeout(kiwi_productHunt_token_refresh_interval.intervalId);
    }
    timeoutIntervalId = setTimeout(function() {
      return requestProductHuntOauthToken(kiwi_productHunt_oauth);
    }, timeoutDelay);
    return kiwi_productHunt_token_refresh_interval = {
      timestamp: token_timestamp,
      intervalId: timeoutIntervalId
    };
  };

  setTimeout_forRedditRefresh = function(token_timestamp, kiwi_reddit_oauth, ignoreTimeoutDelayComparison) {
    var currentTime, timeoutDelay, timeoutIntervalId;
    if (ignoreTimeoutDelayComparison == null) {
      ignoreTimeoutDelayComparison = false;
    }
    currentTime = Date.now();
    timeoutDelay = token_timestamp - currentTime;
    if ((kiwi_reddit_token_refresh_interval != null) && (kiwi_reddit_token_refresh_interval.timestamp != null) && ignoreTimeoutDelayComparison === false) {
      if (timeoutDelay > kiwi_reddit_token_refresh_interval.timestamp - currentTime) {
        return 0;
      }
    }
    if ((kiwi_reddit_token_refresh_interval != null) && (kiwi_reddit_token_refresh_interval.timestamp != null)) {
      clearTimeout(kiwi_reddit_token_refresh_interval.intervalId);
    }
    timeoutIntervalId = setTimeout(function() {
      return requestRedditOathToken(kiwi_reddit_oauth);
    }, timeoutDelay);
    return kiwi_reddit_token_refresh_interval = {
      timestamp: token_timestamp,
      intervalId: timeoutIntervalId
    };
  };

  requestRedditOathToken = function(kiwi_reddit_oauth) {
    var currentTime, queryObj;
    currentTime = Date.now();
    queryObj = {
      type: "POST",
      data: {
        grant_type: "https://oauth.reddit.com/grants/installed_client",
        device_id: kiwi_reddit_oauth.device_id
      },
      url: 'https://www.reddit.com/api/v1/access_token',
      statusCode: {
        0: function() {
          var tryAgainTimestamp;
          tryAgainTimestamp = currentTime + (1000 * 60 * 3);
          setTimeout_forRedditRefresh(tryAgainTimestamp, kiwi_reddit_oauth);
          send_kiwi_userMessage("redditDown");
          return console.log('unavailable!2');
        },
        504: function() {
          var tryAgainTimestamp;
          tryAgainTimestamp = currentTime + (1000 * 60 * 3);
          setTimeout_forRedditRefresh(tryAgainTimestamp, kiwi_reddit_oauth);
          send_kiwi_userMessage("redditDown");
          return console.log('unavailable!2');
        },
        503: function() {
          var tryAgainTimestamp;
          tryAgainTimestamp = currentTime + (1000 * 60 * 3);
          setTimeout_forRedditRefresh(tryAgainTimestamp, kiwi_reddit_oauth);
          send_kiwi_userMessage("redditDown");
          return console.log('unavailable!2');
        },
        502: function() {
          var tryAgainTimestamp;
          tryAgainTimestamp = currentTime + (1000 * 60 * 3);
          setTimeout_forRedditRefresh(tryAgainTimestamp, kiwi_reddit_oauth);
          send_kiwi_userMessage("redditDown");
          return console.log('Fail!2');
        },
        401: function() {
          var tryAgainTimestamp;
          tryAgainTimestamp = currentTime + (1000 * 60 * 3);
          setTimeout_forRedditRefresh(tryAgainTimestamp, kiwi_reddit_oauth);
          send_kiwi_userMessage("redditDown");
          return console.log('unauthenticated2');
        }
      },
      headers: {
        'Authorization': 'Basic ' + btoa(kiwi_reddit_oauth.client_id + ":"),
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-Requested-With': 'csrf suck it ' + getRandom(1, 10000000)
      },
      cache: false,
      async: true,
      success: function(data) {
        var setObj, token_lifespan_timestamp;
        if ((data.access_token != null) && (data.expires_in != null) && data.token_type === "bearer") {
          token_lifespan_timestamp = currentTime + data.expires_in * 1000;
          setObj = {};
          setObj['kiwi_reddit_oauth'] = {
            token: data.access_token,
            token_type: 'bearer',
            token_lifespan_timestamp: token_lifespan_timestamp,
            client_id: kiwi_reddit_oauth.client_id,
            device_id: kiwi_reddit_oauth.device_id
          };
          return browser.storage.local.set(setObj, function(data) {
            return setTimeout_forRedditRefresh(token_lifespan_timestamp, setObj.kiwi_reddit_oauth, true);
          });
        }
      },
      fail: function(data) {
        var tryAgainTimestamp;
        tryAgainTimestamp = currentTime + (1000 * 60 * 3);
        setTimeout_forRedditRefresh(tryAgainTimestamp, kiwi_reddit_oauth);
        return send_kiwi_userMessage("generalConnectionFailure");
      }
    };
    return $.ajax(queryObj);
  };

  requestProductHuntOauthToken = function(kiwi_productHunt_oauth) {
    var currentTime, queryObj;
    currentTime = Date.now();
    queryObj = {
      type: "POST",
      data: {
        "client_id": kiwi_productHunt_oauth.client_id,
        "client_secret": kiwi_productHunt_oauth.client_secret,
        "grant_type": "client_credentials"
      },
      statusCode: {
        0: function() {
          var tryAgainTimestamp;
          tryAgainTimestamp = currentTime + (1000 * 60 * 3);
          setTimeout_forProductHuntRefresh(tryAgainTimestamp, kiwi_productHunt_oauth);
          send_kiwi_userMessage("productHuntDown");
          return console.log('unavailable!3');
        },
        504: function() {
          var tryAgainTimestamp;
          tryAgainTimestamp = currentTime + (1000 * 60 * 3);
          setTimeout_forProductHuntRefresh(tryAgainTimestamp, kiwi_productHunt_oauth);
          send_kiwi_userMessage("productHuntDown");
          return console.log('unavailable!3');
        },
        503: function() {
          var tryAgainTimestamp;
          tryAgainTimestamp = currentTime + (1000 * 60 * 3);
          setTimeout_forProductHuntRefresh(tryAgainTimestamp, kiwi_productHunt_oauth);
          send_kiwi_userMessage("productHuntDown");
          return console.log('unavailable!3');
        },
        502: function() {
          var tryAgainTimestamp;
          tryAgainTimestamp = currentTime + (1000 * 60 * 3);
          setTimeout_forProductHuntRefresh(tryAgainTimestamp, kiwi_productHunt_oauth);
          send_kiwi_userMessage("productHuntDown");
          return console.log('Fail!3');
        },
        401: function() {
          var tryAgainTimestamp;
          tryAgainTimestamp = currentTime + (1000 * 60 * 3);
          setTimeout_forProductHuntRefresh(tryAgainTimestamp, kiwi_productHunt_oauth);
          send_kiwi_userMessage("productHuntDown");
          return console.log('unauthenticated3');
        }
      },
      url: 'https://api.producthunt.com/v1/oauth/token',
      headers: {},
      cache: false,
      complete: function(data) {
        var setObj, token_lifespan_timestamp;
        if ((data.responseJSON != null) && (data.responseJSON.access_token != null) && (data.responseJSON.expires_in != null) && data.responseJSON.token_type === "bearer") {
          token_lifespan_timestamp = currentTime + data.responseJSON.expires_in * 1000;
          setObj = {};
          setObj['kiwi_productHunt_oauth'] = {
            token: data.responseJSON.access_token,
            scope: "public",
            token_type: 'bearer',
            token_lifespan_timestamp: token_lifespan_timestamp,
            client_id: kiwi_productHunt_oauth.client_id,
            client_secret: kiwi_productHunt_oauth.client_secret
          };
          return browser.storage.local.set(setObj, function(_data) {
            return setTimeout_forProductHuntRefresh(token_lifespan_timestamp, setObj.kiwi_productHunt_oauth, true);
          });
        }
      },
      fail: function(data) {
        var tryAgainTimestamp;
        tryAgainTimestamp = currentTime + (1000 * 60 * 3);
        send_kiwi_userMessage("generalConnectionFailure");
        return setTimeout_forProductHuntRefresh(tryAgainTimestamp, kiwi_productHunt_oauth);
      }
    };
    return $.ajax(queryObj);
  };

  browser.storage.local.get(null, function(allItemsInLocalStorage) {
    var currentTime, token_timestamp;
    currentTime = Date.now();
    if ((allItemsInLocalStorage.kiwi_productHunt_oauth == null) || (allItemsInLocalStorage.kiwi_productHunt_oauth.token == null)) {
      requestProductHuntOauthToken(temp__kiwi_productHunt_oauth);
    }
    if ((allItemsInLocalStorage.kiwi_productHunt_oauth == null) || (allItemsInLocalStorage.kiwi_productHunt_oauth.token == null)) {

    } else if (((allItemsInLocalStorage.kiwi_productHunt_oauth.token_lifespan_timestamp != null) && currentTime > allItemsInLocalStorage.kiwi_productHunt_oauth.token_lifespan_timestamp) || (allItemsInLocalStorage.kiwi_productHunt_oauth.token_lifespan_timestamp == null)) {
      requestProductHuntOauthToken(temp__kiwi_productHunt_oauth);
    } else if ((allItemsInLocalStorage.kiwi_productHunt_oauth.token_lifespan_timestamp != null) && (allItemsInLocalStorage.kiwi_productHunt_oauth != null)) {
      token_timestamp = allItemsInLocalStorage.kiwi_productHunt_oauth.token_lifespan_timestamp;
      if ((kiwi_productHunt_token_refresh_interval == null) || kiwi_productHunt_token_refresh_interval.timestamp !== token_timestamp) {
        setTimeout_forProductHuntRefresh(token_timestamp, allItemsInLocalStorage.kiwi_productHunt_oauth);
      }
    }
    if ((allItemsInLocalStorage.kiwi_reddit_oauth == null) || (allItemsInLocalStorage.kiwi_reddit_oauth.token == null)) {
      requestRedditOathToken(temp__kiwi_reddit_oauth);
    }
    if ((allItemsInLocalStorage.kiwi_reddit_oauth == null) || (allItemsInLocalStorage.kiwi_reddit_oauth.token == null)) {

    } else if (((allItemsInLocalStorage.kiwi_reddit_oauth.token_lifespan_timestamp != null) && currentTime > allItemsInLocalStorage.kiwi_reddit_oauth.token_lifespan_timestamp) || (allItemsInLocalStorage.kiwi_reddit_oauth.token_lifespan_timestamp == null)) {
      return requestRedditOathToken(temp__kiwi_reddit_oauth);
    } else if ((allItemsInLocalStorage.kiwi_reddit_oauth.token_lifespan_timestamp != null) && (allItemsInLocalStorage.kiwi_reddit_oauth != null)) {
      token_timestamp = allItemsInLocalStorage.kiwi_reddit_oauth.token_lifespan_timestamp;
      if ((kiwi_reddit_token_refresh_interval == null) || kiwi_reddit_token_refresh_interval.timestamp !== token_timestamp) {
        return setTimeout_forRedditRefresh(token_timestamp, allItemsInLocalStorage.kiwi_reddit_oauth);
      }
    }
  });

  if (typeof google !== "undefined" && google !== null) {
    google.load('search', '1');
  }

  newsSearch = null;

  onGoogleLoad = function() {
    newsSearch = new google.search.NewsSearch();
    return newsSearch.setNoHtmlGeneration();
  };

  google.setOnLoadCallback(onGoogleLoad);

  is_url_blocked = function(blockedLists, url) {
    return doesURLmatchSubstringLists(blockedLists, url);
  };

  is_url_whitelisted = function(whiteLists, url) {
    return doesURLmatchSubstringLists(whiteLists, url);
  };

  doesURLmatchSubstringLists = function(urlSubstringLists, url) {
    var urlSubstring, urlSubstringArray, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    if (urlSubstringLists.anyMatch != null) {
      _ref = urlSubstringLists.anyMatch;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        urlSubstring = _ref[_i];
        if (url.indexOf(urlSubstring) !== -1) {
          return true;
        }
      }
    }
    if (urlSubstringLists.beginsWith != null) {
      _ref1 = urlSubstringLists.beginsWith;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        urlSubstring = _ref1[_j];
        if (url.indexOf(urlSubstring) === 0) {
          return true;
        }
      }
    }
    if (urlSubstringLists.endingIn != null) {
      _ref2 = urlSubstringLists.endingIn;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        urlSubstring = _ref2[_k];
        if (url.indexOf(urlSubstring) === url.length - urlSubstring.length) {
          return true;
        }
        urlSubstring += '/';
        if (url.indexOf(urlSubstring) === url.length - urlSubstring.length) {
          return true;
        }
      }
    }
    if (urlSubstringLists.unless != null) {
      _ref3 = urlSubstringLists.unless;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        urlSubstringArray = _ref3[_l];
        if (url.indexOf(urlSubstringArray[0]) !== -1) {
          if (url.indexOf(urlSubstringArray[1]) === -1) {
            return true;
          }
        }
      }
    }
    return false;
  };

  returnNumberOfActiveServices = function(servicesInfo) {
    var numberOfActiveServices, service, _i, _len;
    numberOfActiveServices = 0;
    for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
      service = servicesInfo[_i];
      if (service.active === 'on') {
        numberOfActiveServices++;
      }
    }
    return numberOfActiveServices;
  };

  sendParcel = function(parcel) {
    var outPort;
    outPort = browser.runtime.connect({
      name: "kiwi_fromBackgroundToPopup"
    });
    if ((parcel.msg == null) || (parcel.forUrl == null)) {
      return false;
    }
    switch (parcel.msg) {
      case 'kiwiPP_popupParcel_ready':
        return outPort.postMessage(parcel);
    }
  };

  _save_a_la_carte = function(parcel) {
    var setObj;
    setObj = {};
    setObj[parcel.keyName] = parcel.newValue;
    return browser.storage[parcel.localOrSync].set(setObj, function(data) {
      var tempResponsesStoreServices;
      if ((tempResponsesStore == null) || (tempResponsesStore.services == null)) {
        tempResponsesStoreServices = {};
      } else {
        tempResponsesStoreServices = tempResponsesStore.services;
      }
      if (parcel.refreshView != null) {
        return _set_popupParcel(tempResponsesStoreServices, tabUrl, true, parcel.refreshView);
      } else {
        return _set_popupParcel(tempResponsesStoreServices, tabUrl, false);
      }
    });
  };

  browser.runtime.onConnect.addListener(function(port) {
    if (port.name === 'kiwi_fromBackgroundToPopup') {
      popupOpen = true;
      return port.onMessage.addListener(function(dataFromPopup) {
        var currentTime, index, newResultsBool, parcel, preppedResponsesInPopupParcel, preppedResponsesInTempResponsesStore, sentInstance, service, serviceName, _i, _len, _ref, _ref1, _ref2;
        if (dataFromPopup.msg == null) {
          return false;
        }
        switch (dataFromPopup.msg) {
          case 'kiwiPP_acknowledgeMessage':
            currentTime = Date.now();
            _ref = kiwi_userMessages[dataFromPopup.messageToAcknowledge].sentAndAcknowledgedInstanceObjects;
            for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
              sentInstance = _ref[index];
              if (sentInstance.userAcknowledged == null) {
                kiwi_userMessages[dataFromPopup.messageToAcknowledge].sentAndAcknowledgedInstanceObjects[index] = currentTime;
              }
            }
            if (kiwi_urlsResultsCache[tabUrl] != null) {
              return _set_popupParcel(kiwi_urlsResultsCache[tabUrl], tabUrl, true);
            } else if ((tempResponsesStore != null) && tempResponsesStore.forUrl === tabUrl) {
              return _set_popupParcel(tempResponsesStore.services, tabUrl, true);
            } else {
              return _set_popupParcel({}, tabUrl, true);
            }
            break;
          case 'kiwiPP_post_customSearch':
            if ((dataFromPopup.customSearchRequest != null) && (dataFromPopup.customSearchRequest.queryString != null) && dataFromPopup.customSearchRequest.queryString !== '') {
              return browser.storage.sync.get(null, function(allItemsInSyncedStorage) {
                var serviceInfoObject, _j, _len1, _ref1, _results;
                if (allItemsInSyncedStorage['kiwi_servicesInfo'] != null) {
                  _ref1 = allItemsInSyncedStorage['kiwi_servicesInfo'];
                  _results = [];
                  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                    serviceInfoObject = _ref1[_j];
                    if (dataFromPopup.customSearchRequest.servicesToSearch[serviceInfoObject.name] != null) {
                      if (serviceInfoObject.name === 'gnews') {
                        _results.push(dispatchGnewsQuery__customSearch(dataFromPopup.customSearchRequest.queryString, dataFromPopup.customSearchRequest.servicesToSearch, serviceInfoObject, allItemsInSyncedStorage['kiwi_servicesInfo']));
                      } else if (serviceInfoObject.name === 'productHunt') {
                        _results.push(dispatchProductHuntQuery__customSearch(dataFromPopup.customSearchRequest.queryString, dataFromPopup.customSearchRequest.servicesToSearch, serviceInfoObject, allItemsInSyncedStorage['kiwi_servicesInfo']));
                      } else if ((serviceInfoObject.customSearchApi != null) && serviceInfoObject.customSearchApi !== '') {
                        _results.push(dispatchQuery__customSearch(dataFromPopup.customSearchRequest.queryString, dataFromPopup.customSearchRequest.servicesToSearch, serviceInfoObject, allItemsInSyncedStorage['kiwi_servicesInfo']));
                      } else {
                        _results.push(void 0);
                      }
                    } else {
                      _results.push(void 0);
                    }
                  }
                  return _results;
                }
              });
            }
            break;
          case 'kiwiPP_researchUrlOverrideButton':
            return initIfNewURL(true, true);
          case 'kiwiPP_clearAllURLresults':
            updateBadgeText('');
            kiwi_urlsResultsCache = {};
            tempResponsesStore = {};
            return _set_popupParcel({}, tabUrl, true);
          case 'kiwiPP_refreshSearchQuery':
            kiwi_customSearchResults = {};
            if (tempResponsesStore.forUrl === tabUrl) {
              return _set_popupParcel(tempResponsesStore.services, tabUrl, true);
            } else if (kiwi_urlsResultsCache[tabUrl] != null) {
              return _set_popupParcel(kiwi_urlsResultsCache[tabUrl], tabUrl, true);
            } else {
              return _set_popupParcel({}, tabUrl, true);
            }
            break;
          case 'kiwiPP_refreshURLresults':
            if ((kiwi_urlsResultsCache != null) && (kiwi_urlsResultsCache[tabUrl] != null)) {
              delete kiwi_urlsResultsCache[tabUrl];
            }
            tempResponsesStore = {};
            return initIfNewURL(true);
          case 'kiwiPP_reset_timer':
            dataFromPopup.kiwi_userPreferences['autoOffAtUTCmilliTimestamp'] = setAutoOffTimer(true, dataFromPopup.kiwi_userPreferences.autoOffAtUTCmilliTimestamp, dataFromPopup.kiwi_userPreferences.autoOffTimerValue, dataFromPopup.kiwi_userPreferences.autoOffTimerType, dataFromPopup.kiwi_userPreferences.researchModeOnOff);
            parcel = {
              refreshView: 'userPreferences',
              keyName: 'kiwi_userPreferences',
              newValue: dataFromPopup.kiwi_userPreferences,
              localOrSync: 'sync'
            };
            return _save_a_la_carte(parcel);
          case 'kiwiPP_post_save_a_la_carte':
            return _save_a_la_carte(dataFromPopup);
          case 'kiwiPP_post_savePopupParcel':
            _save_from_popupParcel(dataFromPopup.newPopupParcel, dataFromPopup.forUrl, dataFromPopup.refreshView);
            if (kiwi_urlsResultsCache[tabUrl] != null) {
              return refreshBadge(dataFromPopup.newPopupParcel.kiwi_servicesInfo, kiwi_urlsResultsCache[tabUrl]);
            }
            break;
          case 'kiwiPP_request_popupParcel':
            if (dataFromPopup.forUrl === tabUrl) {
              preppedResponsesInPopupParcel = 0;
              if ((popupParcel != null) && (popupParcel.allPreppedResults != null)) {
                _ref1 = popupParcel.allPreppedResults;
                for (serviceName in _ref1) {
                  service = _ref1[serviceName];
                  if (service.service_PreppedResults != null) {
                    preppedResponsesInPopupParcel += service.service_PreppedResults.length;
                  }
                }
              }
              preppedResponsesInTempResponsesStore = 0;
              if ((tempResponsesStore != null) && (tempResponsesStore.services != null)) {
                _ref2 = tempResponsesStore.services;
                for (serviceName in _ref2) {
                  service = _ref2[serviceName];
                  preppedResponsesInTempResponsesStore += service.service_PreppedResults.length;
                }
              }
              newResultsBool = false;
              if (tempResponsesStore.forUrl === tabUrl && preppedResponsesInTempResponsesStore !== preppedResponsesInPopupParcel) {
                newResultsBool = true;
              }
              if ((popupParcel != null) && popupParcel.forUrl === tabUrl && newResultsBool === false) {
                parcel = {};
                parcel.msg = 'kiwiPP_popupParcel_ready';
                parcel.forUrl = tabUrl;
                parcel.popupParcel = popupParcel;
                return sendParcel(parcel);
              } else {
                if ((tempResponsesStore.services == null) || tempResponsesStore.forUrl !== tabUrl) {
                  return _set_popupParcel({}, tabUrl, true);
                } else {
                  return _set_popupParcel(tempResponsesStore.services, tabUrl, true);
                }
              }
            }
        }
      });
    }
  });

  initialize = function(currentUrl) {
    return browser.storage.sync.get(null, function(allItemsInSyncedStorage) {
      if (allItemsInSyncedStorage['kiwi_servicesInfo'] == null) {
        return browser.storage.sync.set({
          'kiwi_servicesInfo': defaultServicesInfo
        }, function(servicesInfo) {
          return getUrlResults_to_refreshBadgeIcon(defaultServicesInfo, currentUrl);
        });
      } else {
        return getUrlResults_to_refreshBadgeIcon(allItemsInSyncedStorage['kiwi_servicesInfo'], currentUrl);
      }
    });
  };

  getUrlResults_to_refreshBadgeIcon = function(servicesInfo, currentUrl) {
    var currentTime, sendPopupParcel, service, _i, _len;
    currentTime = Date.now();
    if (Object.keys(kiwi_urlsResultsCache).length > 0) {
      if (kiwi_urlsResultsCache[currentUrl] != null) {
        refreshBadge(servicesInfo, kiwi_urlsResultsCache[currentUrl]);
        for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
          service = servicesInfo[_i];
          if (kiwi_urlsResultsCache[currentUrl][service.name] != null) {
            if ((currentTime - kiwi_urlsResultsCache[currentUrl][service.name].timestamp) > checkForUrlHourInterval * 3600000) {
              check_updateServiceResults(servicesInfo, currentUrl, kiwi_urlsResultsCache);
              return 0;
            }
          } else {
            check_updateServiceResults(servicesInfo, currentUrl, kiwi_urlsResultsCache);
            return 0;
          }
        }
        tempResponsesStore.forUrl = currentUrl;
        tempResponsesStore.services = kiwi_urlsResultsCache[currentUrl];
        if (popupOpen) {
          sendPopupParcel = true;
        } else {
          sendPopupParcel = false;
        }
        return _set_popupParcel(tempResponsesStore.services, currentUrl, sendPopupParcel);
      } else {
        return check_updateServiceResults(servicesInfo, currentUrl, kiwi_urlsResultsCache);
      }
    } else {
      return check_updateServiceResults(servicesInfo, currentUrl, null);
    }
  };

  _save_url_results = function(servicesInfo, tempResponsesStore, _urlsResultsCache) {
    var previousUrl, service, urlsResultsCache, _i, _len;
    urlsResultsCache = _.extend({}, _urlsResultsCache);
    previousUrl = tempResponsesStore.forUrl;
    if (urlsResultsCache[previousUrl] != null) {
      for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
        service = servicesInfo[_i];
        if (tempResponsesStore.services[service.name] != null) {
          urlsResultsCache[previousUrl][service.name] = {
            forUrl: previousUrl,
            timestamp: tempResponsesStore.services[service.name].timestamp,
            service_PreppedResults: tempResponsesStore.services[service.name].service_PreppedResults
          };
        }
      }
    } else {
      urlsResultsCache[previousUrl] = {};
      urlsResultsCache[previousUrl] = tempResponsesStore.services;
    }
    return urlsResultsCache;
  };

  __randomishStringPadding = function() {
    var characterCounter, paddingString, randomLatinKeycode, randomPaddingLength;
    randomPaddingLength = getRandom(2, 4);
    characterCounter = 0;
    paddingString = "";
    while (characterCounter <= randomPaddingLength) {
      randomLatinKeycode = getRandom(33, 265);
      paddingString += String.fromCharCode(randomLatinKeycode);
      characterCounter++;
    }
    return paddingString;
  };

  _save_historyBlob = function(kiwi_urlsResultsCache, tabUrl) {
    var tabUrl_hash, tabUrl_hashWordArray;
    tabUrl_hashWordArray = CryptoJS.SHA512(tabUrl);
    tabUrl_hash = tabUrl_hashWordArray.toString(CryptoJS.enc.Latin1);
    return browser.storage.local.get(null, function(allItemsInLocalStorage) {
      var historyString, newKiwi_historyBlob, paddedHistoryString;
      historyString = reduceHashByHalf(tabUrl_hash);
      paddedHistoryString = __randomishStringPadding() + historyString;
      if ((allItemsInLocalStorage.kiwi_historyBlob != null) && typeof allItemsInLocalStorage.kiwi_historyBlob === 'string' && allItemsInLocalStorage.kiwi_historyBlob.indexOf(historyString) < 15000 && allItemsInLocalStorage.kiwi_historyBlob.indexOf(historyString) !== -1) {
        return 0;
      } else {
        if (allItemsInLocalStorage.kiwi_historyBlob == null) {
          paddedHistoryString = paddedHistoryString + __randomishStringPadding();
        }
        if (allItemsInLocalStorage['kiwi_historyBlob'] != null) {
          newKiwi_historyBlob = paddedHistoryString + allItemsInLocalStorage['kiwi_historyBlob'];
        } else {
          newKiwi_historyBlob = paddedHistoryString;
        }
      }
      if ((allItemsInLocalStorage.kiwi_historyBlob != null) && allItemsInLocalStorage.kiwi_historyBlob.indexOf(historyString) > 17000) {
        newKiwi_historyBlob = newKiwi_historyBlob.substring(0, 15500);
      }
      return browser.storage.local.set({
        'kiwi_historyBlob': newKiwi_historyBlob
      }, function() {});
    });
  };

  check_updateServiceResults = function(servicesInfo, currentUrl, urlsResultsCache) {
    var currentTime, previousResponsesStore, service, _i, _len, _results, _urlsResultsCache;
    if (urlsResultsCache == null) {
      urlsResultsCache = null;
    }
    if ((urlsResultsCache != null) && Object.keys(tempResponsesStore).length > 0) {
      previousResponsesStore = _.extend({}, tempResponsesStore);
      _urlsResultsCache = _.extend({}, urlsResultsCache);
      kiwi_urlsResultsCache = _save_url_results(servicesInfo, previousResponsesStore, _urlsResultsCache);
      _save_historyBlob(kiwi_urlsResultsCache, previousResponsesStore.forUrl);
    }
    tempResponsesStore.forUrl = currentUrl;
    tempResponsesStore.services = {};
    currentTime = Date.now();
    if (urlsResultsCache == null) {
      urlsResultsCache = {};
    }
    if (urlsResultsCache[currentUrl] == null) {
      urlsResultsCache[currentUrl] = {};
    }
    _results = [];
    for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
      service = servicesInfo[_i];
      if (service.active === 'on') {
        if (urlsResultsCache[currentUrl][service.name] != null) {
          if ((currentTime - urlsResultsCache[currentUrl][service.name].timestamp) > checkForUrlHourInterval * 3600000) {
            if (service.name === "gnews") {
              _results.push(dispatchGnewsQuery(service, currentUrl, servicesInfo));
            } else {
              _results.push(dispatchQuery(service, currentUrl, servicesInfo));
            }
          } else {
            _results.push(void 0);
          }
        } else {
          if (service.name === "gnews") {
            _results.push(dispatchGnewsQuery(service, currentUrl, servicesInfo));
          } else {
            _results.push(dispatchQuery(service, currentUrl, servicesInfo));
          }
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  dispatchGnewsQuery = function(service_info, currentUrl, servicesInfo) {
    var currentTime;
    currentTime = Date.now();
    if ((newsSearch != null) && (tabTitleObject != null) && tabTitleObject.forUrl === currentUrl && tabTitleObject.tabTitle !== null && tabTitleObject.tabTitle !== "") {
      if (serviceQueryTimestamps[service_info.name] == null) {
        serviceQueryTimestamps[service_info.name] = currentTime;
      } else {
        if ((currentTime - serviceQueryTimestamps[service_info.name]) < queryThrottleSeconds * 1000) {
          setTimeout(function() {
            if (currentUrl === tabUrl) {
              return dispatchGnewsQuery(service_info, currentUrl, servicesInfo);
            }
          }, 2000);
          return 0;
        } else {
          serviceQueryTimestamps[service_info.name] = currentTime;
        }
      }
      newsSearch.setSearchCompleteCallback(this, function() {
        var responsePackage, results;
        if (_.isArray(newsSearch.results)) {
          results = newsSearch.results;
        } else {
          results = [];
        }
        responsePackage = {
          forUrl: currentUrl,
          servicesInfo: servicesInfo,
          serviceName: service_info.name,
          queryResult: results
        };
        return setPreppedServiceResults(responsePackage, servicesInfo);
      });
      return newsSearch.execute(tabTitleObject.tabTitle);
    }
  };

  dispatchQuery = function(service_info, currentUrl, servicesInfo) {
    var currentTime;
    currentTime = Date.now();
    if (serviceQueryTimestamps[service_info.name] == null) {
      serviceQueryTimestamps[service_info.name] = currentTime;
    } else {
      if ((currentTime - serviceQueryTimestamps[service_info.name]) < queryThrottleSeconds * 1000) {
        setTimeout(function() {
          return dispatchQuery(service_info, currentUrl, servicesInfo);
        }, 2000);
        return 0;
      } else {
        serviceQueryTimestamps[service_info.name] = currentTime;
      }
    }
    return browser.storage.local.get(null, function(allItemsInLocalStorage) {
      var queryObj, responsePackage, tryAgainTimestamp;
      queryObj = {
        type: "GET",
        url: service_info.queryApi + encodeURIComponent(currentUrl),
        statusCode: {
          0: function() {
            var responsePackage;
            responsePackage = {
              forUrl: currentUrl,
              servicesInfo: servicesInfo,
              serviceName: service_info.name,
              queryResult: null
            };
            console.log('unavailable!4');
            if (kiwi_userMessages[service_info.name + "Down"] != null) {
              send_kiwi_userMessage(service_info.name + "Down");
            }
            return setPreppedServiceResults(responsePackage, servicesInfo);
          },
          504: function() {
            var responsePackage;
            responsePackage = {
              forUrl: currentUrl,
              servicesInfo: servicesInfo,
              serviceName: service_info.name,
              queryResult: null
            };
            console.log('unavailable!4');
            if (kiwi_userMessages[service_info.name + "Down"] != null) {
              send_kiwi_userMessage(service_info.name + "Down");
            }
            return setPreppedServiceResults(responsePackage, servicesInfo);
          },
          503: function() {
            var responsePackage;
            responsePackage = {
              forUrl: currentUrl,
              servicesInfo: servicesInfo,
              serviceName: service_info.name,
              queryResult: null
            };
            console.log('unavailable!4');
            if (kiwi_userMessages[service_info.name + "Down"] != null) {
              send_kiwi_userMessage(service_info.name + "Down");
            }
            return setPreppedServiceResults(responsePackage, servicesInfo);
          },
          502: function() {
            var responsePackage;
            responsePackage = {
              forUrl: currentUrl,
              servicesInfo: servicesInfo,
              serviceName: service_info.name,
              queryResult: null
            };
            console.log('Fail!4');
            if (kiwi_userMessages[service_info.name + "Down"] != null) {
              send_kiwi_userMessage(service_info.name + "Down");
            }
            return setPreppedServiceResults(responsePackage, servicesInfo);
          },
          401: function() {
            var responsePackage, tryAgainTimestamp;
            responsePackage = {
              forUrl: currentUrl,
              servicesInfo: servicesInfo,
              serviceName: service_info.name,
              queryResult: null
            };
            console.log('unauthenticated4');
            setPreppedServiceResults(responsePackage, servicesInfo);
            if (kiwi_userMessages[service_info.name + "Down"] != null) {
              send_kiwi_userMessage(service_info.name + "Down");
            }
            if (service_info.name === 'productHunt') {
              tryAgainTimestamp = currentTime + (1000 * 60 * 2);
              return setTimeout_forProductHuntRefresh(tryAgainTimestamp, temp__kiwi_productHunt_oauth);
            } else if (service_info.name === 'reddit') {
              tryAgainTimestamp = currentTime + (1000 * 60 * 2);
              return setTimeout_forRedditRefresh(tryAgainTimestamp, temp__kiwi_reddit_oauth);
            }
          }
        },
        success: function(queryResult) {
          var responsePackage;
          responsePackage = {
            forUrl: currentUrl,
            servicesInfo: servicesInfo,
            serviceName: service_info.name,
            queryResult: queryResult
          };
          return setPreppedServiceResults(responsePackage, servicesInfo);
        }
      };
      if (service_info.name === 'reddit' && (allItemsInLocalStorage.kiwi_reddit_oauth != null)) {
        queryObj.headers = {
          'Authorization': "'bearer " + allItemsInLocalStorage.kiwi_reddit_oauth.token + "'"
        };
      } else if (service_info.name === 'reddit' && (allItemsInLocalStorage.kiwi_reddit_oauth == null)) {
        responsePackage = {
          forUrl: currentUrl,
          servicesInfo: servicesInfo,
          serviceName: service_info.name,
          queryResult: null
        };
        setPreppedServiceResults(responsePackage, servicesInfo);
        tryAgainTimestamp = currentTime + (1000 * 60 * 2);
        setTimeout_forRedditRefresh(tryAgainTimestamp, temp__kiwi_reddit_oauth);
        return 0;
      }
      if (service_info.name === 'productHunt' && (allItemsInLocalStorage.kiwi_productHunt_oauth != null)) {
        queryObj.headers = {
          'Authorization': "Bearer " + allItemsInLocalStorage.kiwi_productHunt_oauth.token,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        };
      } else if (service_info.name === 'productHunt' && (allItemsInLocalStorage.kiwi_productHunt_oauth == null)) {
        responsePackage = {
          forUrl: currentUrl,
          servicesInfo: servicesInfo,
          serviceName: service_info.name,
          queryResult: null
        };
        setPreppedServiceResults(responsePackage, servicesInfo);
        tryAgainTimestamp = currentTime + (1000 * 60 * 2);
        setTimeout_forProductHuntRefresh(tryAgainTimestamp, temp__kiwi_productHunt_oauth);
        return 0;
      }
      return $.ajax(queryObj);
    });
  };

  dispatchGnewsQuery__customSearch = function(customSearchQuery, servicesToSearch, service_info, servicesInfo) {
    var currentTime;
    currentTime = Date.now();
    if (newsSearch != null) {
      if (serviceQueryTimestamps[service_info.name] == null) {
        serviceQueryTimestamps[service_info.name] = currentTime;
      } else {
        if ((currentTime - serviceQueryTimestamps[service_info.name]) < queryThrottleSeconds * 1000) {
          setTimeout(function() {
            return dispatchGnewsQuery__customSearch(service_info, customSearchQuery, servicesInfo);
          }, queryThrottleSeconds * 1000);
          return 0;
        } else {
          serviceQueryTimestamps[service_info.name] = currentTime;
        }
      }
      newsSearch.setSearchCompleteCallback(this, function() {
        var responsePackage, results;
        if (_.isArray(newsSearch.results)) {
          results = newsSearch.results;
        } else {
          results = [];
        }
        responsePackage = {
          servicesInfo: servicesInfo,
          servicesToSearch: servicesToSearch,
          customSearchQuery: customSearchQuery,
          serviceName: service_info.name,
          queryResult: results
        };
        return setPreppedServiceResults__customSearch(responsePackage, servicesInfo);
      });
      return newsSearch.execute(customSearchQuery);
    }
  };

  dispatchProductHuntQuery__customSearch = function(customSearchQuery, servicesToSearch, service_info, servicesInfo) {
    var algoliaPHclient, algoliaPHindex, currentTime;
    currentTime = Date.now();
    if (serviceQueryTimestamps[service_info.name] == null) {
      serviceQueryTimestamps[service_info.name] = currentTime;
    } else {
      if ((currentTime - serviceQueryTimestamps[service_info.name]) < queryThrottleSeconds * 1000) {
        setTimeout(function() {
          return dispatchQuery__customSearch(customSearchQuery, servicesToSearch, service_info, servicesInfo);
        }, 2000);
        return 0;
      } else {
        serviceQueryTimestamps[service_info.name] = currentTime;
      }
    }
    algoliaPHclient = algoliasearch('0H4SMABBSG', '9670d2d619b9d07859448d7628eea5f3');
    algoliaPHindex = algoliaPHclient.initIndex('Post_production');
    return algoliaPHindex.search(customSearchQuery, function(err, content) {
      var queryResult, responsePackage;
      if (err) {
        console.error(err);
        responsePackage = {
          servicesInfo: servicesInfo,
          serviceName: service_info.name,
          queryResult: null,
          servicesToSearch: servicesToSearch,
          customSearchQuery: customSearchQuery
        };
        setPreppedServiceResults__customSearch(responsePackage, servicesInfo);
        if (kiwi_userMessages["productHuntDown__customSearch"] != null) {
          send_kiwi_userMessage('productHuntDown__customSearch');
        }
        return;
      }
      if ((content != null) && (content.hits != null)) {
        queryResult = content.hits;
      } else {
        queryResult = [];
      }
      responsePackage = {
        servicesInfo: servicesInfo,
        serviceName: service_info.name,
        queryResult: queryResult,
        servicesToSearch: servicesToSearch,
        customSearchQuery: customSearchQuery
      };
      return setPreppedServiceResults__customSearch(responsePackage, servicesInfo);
    });
  };

  dispatchQuery__customSearch = function(customSearchQuery, servicesToSearch, service_info, servicesInfo) {
    var currentTime, queryUrl, tagIdentifier, tagObject, _ref;
    currentTime = Date.now();
    if (serviceQueryTimestamps[service_info.name] == null) {
      serviceQueryTimestamps[service_info.name] = currentTime;
    } else {
      if ((currentTime - serviceQueryTimestamps[service_info.name]) < queryThrottleSeconds * 1000) {
        setTimeout(function() {
          return dispatchQuery__customSearch(customSearchQuery, servicesToSearch, service_info, servicesInfo);
        }, 2000);
        return 0;
      } else {
        serviceQueryTimestamps[service_info.name] = currentTime;
      }
    }
    queryUrl = service_info.customSearchApi + encodeURIComponent(customSearchQuery);
    if ((servicesToSearch[service_info.name].customSearchTags != null) && Object.keys(servicesToSearch[service_info.name].customSearchTags).length > 0) {
      _ref = servicesToSearch[service_info.name].customSearchTags;
      for (tagIdentifier in _ref) {
        tagObject = _ref[tagIdentifier];
        queryUrl = queryUrl + service_info.customSearchTags__convention.string + service_info.customSearchTags[tagIdentifier].string;
      }
    }
    return browser.storage.local.get(null, function(allItemsInLocalStorage) {
      var queryObj, responsePackage;
      queryObj = {
        type: "GET",
        url: queryUrl,
        statusCode: {
          0: function() {
            var responsePackage;
            responsePackage = {
              servicesInfo: servicesInfo,
              serviceName: service_info.name,
              queryResult: null,
              servicesToSearch: servicesToSearch,
              customSearchQuery: customSearchQuery
            };
            console.log('unavailable!1');
            if (kiwi_userMessages[service_info.name + "Down"] != null) {
              send_kiwi_userMessage(service_info.name + "Down");
            }
            return setPreppedServiceResults__customSearch(responsePackage, servicesInfo);
          },
          504: function() {
            var responsePackage;
            responsePackage = {
              servicesInfo: servicesInfo,
              serviceName: service_info.name,
              queryResult: null,
              servicesToSearch: servicesToSearch,
              customSearchQuery: customSearchQuery
            };
            console.log('unavailable!1');
            if (kiwi_userMessages[service_info.name + "Down"] != null) {
              send_kiwi_userMessage(service_info.name + "Down");
            }
            return setPreppedServiceResults__customSearch(responsePackage, servicesInfo);
          },
          503: function() {
            var responsePackage;
            responsePackage = {
              servicesInfo: servicesInfo,
              serviceName: service_info.name,
              queryResult: null,
              servicesToSearch: servicesToSearch,
              customSearchQuery: customSearchQuery
            };
            console.log('unavailable!1');
            if (kiwi_userMessages[service_info.name + "Down"] != null) {
              send_kiwi_userMessage(service_info.name + "Down");
            }
            return setPreppedServiceResults__customSearch(responsePackage, servicesInfo);
          },
          502: function() {
            var responsePackage;
            responsePackage = {
              servicesInfo: servicesInfo,
              serviceName: service_info.name,
              queryResult: null,
              servicesToSearch: servicesToSearch,
              customSearchQuery: customSearchQuery
            };
            console.log('Fail!1');
            if (kiwi_userMessages[service_info.name + "Down"] != null) {
              send_kiwi_userMessage(service_info.name + "Down");
            }
            return setPreppedServiceResults__customSearch(responsePackage, servicesInfo);
          },
          401: function() {
            var responsePackage, tryAgainTimestamp;
            responsePackage = {
              servicesInfo: servicesInfo,
              serviceName: service_info.name,
              queryResult: null,
              servicesToSearch: servicesToSearch,
              customSearchQuery: customSearchQuery
            };
            console.log('unauthenticated1');
            setPreppedServiceResults__customSearch(responsePackage, servicesInfo);
            if (kiwi_userMessages[service_info.name + "Down"] != null) {
              send_kiwi_userMessage(service_info.name + "Down");
            }
            if (service_info.name === 'productHunt') {
              tryAgainTimestamp = currentTime + (1000 * 60 * 2);
              return setTimeout_forProductHuntRefresh(tryAgainTimestamp, temp__kiwi_productHunt_oauth);
            } else if (service_info.name === 'reddit') {
              tryAgainTimestamp = currentTime + (1000 * 60 * 2);
              return setTimeout_forRedditRefresh(tryAgainTimestamp, temp__kiwi_reddit_oauth);
            }
          }
        },
        success: function(queryResult) {
          var responsePackage;
          responsePackage = {
            servicesInfo: servicesInfo,
            serviceName: service_info.name,
            queryResult: queryResult,
            servicesToSearch: servicesToSearch,
            customSearchQuery: customSearchQuery
          };
          return setPreppedServiceResults__customSearch(responsePackage, servicesInfo);
        }
      };
      if (service_info.name === 'reddit' && (allItemsInLocalStorage.kiwi_reddit_oauth != null)) {
        queryObj.headers = {
          'Authorization': "'bearer " + allItemsInLocalStorage.kiwi_reddit_oauth.token + "'"
        };
      } else if (service_info.name === 'reddit' && (allItemsInLocalStorage.kiwi_reddit_oauth == null)) {
        responsePackage = {
          servicesInfo: servicesInfo,
          serviceName: service_info.name,
          queryResult: null,
          servicesToSearch: servicesToSearch,
          customSearchQuery: customSearchQuery
        };
        setPreppedServiceResults__customSearch(responsePackage, servicesInfo);
        if (kiwi_userMessages[service_info.name + "Down"] != null) {
          console.log('setPreppedServiceResults__customSearch(responsePackage, servicesInfo)1');
          send_kiwi_userMessage(service_info.name + "Down");
        }
        return 0;
      }
      return $.ajax(queryObj);
    });
  };

  setPreppedServiceResults__customSearch = function(responsePackage, servicesInfo) {
    var completedQueryServicesArray, currentTime, numberOfActiveServices, service, serviceInfo, serviceName, serviceObj, service_PreppedResults, _i, _len, _ref;
    currentTime = Date.now();
    for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
      serviceObj = servicesInfo[_i];
      if (serviceObj.name === responsePackage.serviceName) {
        serviceInfo = serviceObj;
      }
    }
    service_PreppedResults = parseResults[responsePackage.serviceName](responsePackage.queryResult, responsePackage.customSearchQuery, serviceInfo, true);
    if ((kiwi_customSearchResults != null) && (kiwi_customSearchResults.queryString != null) && kiwi_customSearchResults.queryString === responsePackage.customSearchQuery) {
      kiwi_customSearchResults.servicesSearched[responsePackage.serviceName] = {};
      kiwi_customSearchResults.servicesSearched[responsePackage.serviceName].results = service_PreppedResults;
    } else {
      kiwi_customSearchResults = {};
      kiwi_customSearchResults.queryString = responsePackage.customSearchQuery;
      kiwi_customSearchResults.servicesSearchesRequested = responsePackage.servicesToSearch;
      kiwi_customSearchResults.servicesSearched = {};
      kiwi_customSearchResults.servicesSearched[responsePackage.serviceName] = {};
      kiwi_customSearchResults.servicesSearched[responsePackage.serviceName].results = service_PreppedResults;
    }
    numberOfActiveServices = Object.keys(responsePackage.servicesToSearch).length;
    completedQueryServicesArray = [];
    if (kiwi_customSearchResults.queryString === responsePackage.customSearchQuery) {
      _ref = kiwi_customSearchResults.servicesSearched;
      for (serviceName in _ref) {
        service = _ref[serviceName];
        completedQueryServicesArray.push(serviceName);
      }
    }
    completedQueryServicesArray = _.uniq(completedQueryServicesArray);
    if (completedQueryServicesArray.length === numberOfActiveServices && numberOfActiveServices !== 0) {
      if (kiwi_urlsResultsCache[tabUrl] != null) {
        return _set_popupParcel(kiwi_urlsResultsCache[tabUrl], tabUrl, true);
      } else {
        return _set_popupParcel({}, tabUrl, true);
      }
    }
  };

  _set_popupParcel = function(setWith_urlResults, forUrl, sendPopupParcel, renderView, oldUrl) {
    var setObj_popupParcel;
    if (setWith_urlResults == null) {
      setWith_urlResults = {};
    }
    if (renderView == null) {
      renderView = null;
    }
    if (oldUrl == null) {
      oldUrl = false;
    }
    if (setWith_urlResults !== {}) {
      if (forUrl !== tabUrl) {
        return false;
      }
    }
    setObj_popupParcel = {};
    setObj_popupParcel.forUrl = tabUrl;
    return browser.storage.sync.get(null, function(allItemsInSyncedStorage) {
      var isUrlBlocked, messageName, messageObj, parcel, sentInstance, _i, _len, _ref;
      if (allItemsInSyncedStorage['kiwi_userPreferences'] == null) {
        setObj_popupParcel.kiwi_userPreferences = defaultUserPreferences;
      } else {
        setObj_popupParcel.kiwi_userPreferences = allItemsInSyncedStorage['kiwi_userPreferences'];
      }
      if (allItemsInSyncedStorage['kiwi_servicesInfo'] == null) {
        setObj_popupParcel.kiwi_servicesInfo = defaultServicesInfo;
      } else {
        setObj_popupParcel.kiwi_servicesInfo = allItemsInSyncedStorage['kiwi_servicesInfo'];
      }
      if (renderView !== null) {
        setObj_popupParcel.view = renderView;
      }
      setObj_popupParcel.kiwi_customSearchResults = kiwi_customSearchResults;
      if (setWith_urlResults == null) {
        return 0;
      } else {
        setObj_popupParcel.allPreppedResults = setWith_urlResults;
      }
      if (tabUrl === forUrl) {
        setObj_popupParcel.tabInfo = {};
        setObj_popupParcel.tabInfo.tabUrl = tabUrl;
        setObj_popupParcel.tabInfo.tabTitle = tabTitleObject.tabTitle;
      } else {
        setObj_popupParcel.tabInfo = null;
      }
      setObj_popupParcel.urlBlocked = false;
      setObj_popupParcel.kiwi_userMessages = [];
      for (messageName in kiwi_userMessages) {
        messageObj = kiwi_userMessages[messageName];
        _ref = messageObj.sentAndAcknowledgedInstanceObjects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sentInstance = _ref[_i];
          if (sentInstance.userAcknowledged === null) {
            setObj_popupParcel.kiwi_userMessages.push(messageObj);
          }
        }
      }
      isUrlBlocked = is_url_blocked(allItemsInSyncedStorage['kiwi_userPreferences'].urlSubstring_blacklists, tabUrl);
      if (isUrlBlocked === true) {
        setObj_popupParcel.urlBlocked = true;
      }
      if (oldUrl === true) {
        setObj_popupParcel.oldUrl = true;
      } else {
        setObj_popupParcel.oldUrl = false;
      }
      popupParcel = setObj_popupParcel;
      if (sendPopupParcel) {
        parcel = {};
        parcel.msg = 'kiwiPP_popupParcel_ready';
        parcel.forUrl = tabUrl;
        parcel.popupParcel = setObj_popupParcel;
        return sendParcel(parcel);
      }
    });
  };

  setPreppedServiceResults = function(responsePackage, servicesInfo) {
    var completedQueryServicesArray, currentTime, numberOfActiveServices, sendPopupParcel, service, serviceInfo, serviceName, serviceObj, service_PreppedResults, _i, _len, _ref, _ref1;
    currentTime = Date.now();
    if (tabUrl === responsePackage.forUrl) {
      for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
        serviceObj = servicesInfo[_i];
        if (serviceObj.name === responsePackage.serviceName) {
          serviceInfo = serviceObj;
        }
      }
      service_PreppedResults = parseResults[responsePackage.serviceName](responsePackage.queryResult, responsePackage.forUrl, serviceInfo);
      if (tempResponsesStore.services == null) {
        tempResponsesStore = {};
        tempResponsesStore.services = {};
      }
      tempResponsesStore.services[responsePackage.serviceName] = {
        timestamp: currentTime,
        service_PreppedResults: service_PreppedResults,
        forUrl: responsePackage.forUrl
      };
      numberOfActiveServices = returnNumberOfActiveServices(servicesInfo);
      completedQueryServicesArray = [];
      if (tempResponsesStore.forUrl === tabUrl) {
        _ref = tempResponsesStore.services;
        for (serviceName in _ref) {
          service = _ref[serviceName];
          completedQueryServicesArray.push(serviceName);
        }
      }
      if (kiwi_urlsResultsCache[tabUrl] != null) {
        _ref1 = kiwi_urlsResultsCache[tabUrl];
        for (serviceName in _ref1) {
          service = _ref1[serviceName];
          completedQueryServicesArray.push(serviceName);
        }
      }
      completedQueryServicesArray = _.uniq(completedQueryServicesArray);
      if (completedQueryServicesArray.length === numberOfActiveServices && numberOfActiveServices !== 0) {
        kiwi_urlsResultsCache = _save_url_results(servicesInfo, tempResponsesStore, kiwi_urlsResultsCache);
        _save_historyBlob(kiwi_urlsResultsCache, tabUrl);
        if (popupOpen) {
          sendPopupParcel = true;
        } else {
          sendPopupParcel = false;
        }
        _set_popupParcel(kiwi_urlsResultsCache[tabUrl], responsePackage.forUrl, sendPopupParcel);
        return refreshBadge(servicesInfo, kiwi_urlsResultsCache[tabUrl]);
      } else {
        _set_popupParcel(tempResponsesStore.services, responsePackage.forUrl, false);
        return refreshBadge(servicesInfo, tempResponsesStore.services);
      }
    }
  };

  parseResults = {
    productHunt: function(resultsObj, searchQueryString, serviceInfo, customSearchBool) {
      var index, listingKeys, maker, makerObj, matchedListings, post, preppedResult, searchMatch, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
      if (customSearchBool == null) {
        customSearchBool = false;
      }
      matchedListings = [];
      if (resultsObj === null) {
        return matchedListings;
      }
      if (customSearchBool === false) {
        if ((resultsObj.posts != null) && _.isArray(resultsObj.posts) === true) {
          _ref = resultsObj.posts;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            post = _ref[_i];
            listingKeys = ['created_at', 'discussion_url', 'comments_count', 'redirect_url', 'votes_count', 'name', 'featured', 'id', 'user', 'screenshot_url', 'tagline', 'maker_inside', 'makers'];
            preppedResult = _.pick(post, listingKeys);
            preppedResult.kiwi_created_at = Date.parse(preppedResult.created_at);
            preppedResult.kiwi_discussion_url = preppedResult.discussion_url;
            if ((preppedResult.user != null) && (preppedResult.user.name != null)) {
              preppedResult.kiwi_author_name = preppedResult.user.name.trim();
            } else {
              preppedResult.kiwi_author_name = "";
            }
            if ((preppedResult.user != null) && (preppedResult.user.username != null)) {
              preppedResult.kiwi_author_username = preppedResult.user.username;
            } else {
              preppedResult.kiwi_author_username = "";
            }
            if ((preppedResult.user != null) && (preppedResult.user.headline != null)) {
              preppedResult.kiwi_author_headline = preppedResult.user.headline.trim();
            } else {
              preppedResult.kiwi_author_headline = "";
            }
            preppedResult.kiwi_makers = [];
            _ref1 = post.makers;
            for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
              maker = _ref1[index];
              makerObj = {};
              makerObj.headline = maker.headline;
              makerObj.name = maker.name;
              makerObj.username = maker.username;
              makerObj.profile_url = maker.profile_url;
              makerObj.website_url = maker.website_url;
              preppedResult.kiwi_makers.push(makerObj);
            }
            preppedResult.kiwi_exact_match = true;
            preppedResult.kiwi_score = preppedResult.votes_count;
            preppedResult.kiwi_num_comments = preppedResult.comments_count;
            preppedResult.kiwi_permaId = preppedResult.permalink;
            matchedListings.push(preppedResult);
          }
        }
      } else {
        if ((resultsObj != null) && _.isArray(resultsObj)) {
          for (_k = 0, _len2 = resultsObj.length; _k < _len2; _k++) {
            searchMatch = resultsObj[_k];
            listingKeys = ['author', 'url', 'tagline', 'product_makers', 'comment_count', 'vote_count', 'name', 'id', 'user', 'screenshot_url'];
            preppedResult = _.pick(searchMatch, listingKeys);
            preppedResult.kiwi_created_at = null;
            preppedResult.kiwi_discussion_url = "http://www.producthunt.com/" + preppedResult.url;
            if ((preppedResult.author != null) && (preppedResult.author.name != null)) {
              preppedResult.kiwi_author_name = preppedResult.author.name.trim();
            } else {
              preppedResult.kiwi_author_name = "";
            }
            if ((preppedResult.author != null) && (preppedResult.author.username != null)) {
              preppedResult.kiwi_author_username = preppedResult.author.username;
            } else {
              preppedResult.kiwi_author_username = "";
            }
            if ((preppedResult.author != null) && (preppedResult.author.headline != null)) {
              preppedResult.kiwi_author_headline = preppedResult.author.headline.trim();
            } else {
              preppedResult.kiwi_author_headline = "";
            }
            preppedResult.kiwi_makers = [];
            _ref2 = searchMatch.product_makers;
            for (index = _l = 0, _len3 = _ref2.length; _l < _len3; index = ++_l) {
              maker = _ref2[index];
              makerObj = {};
              makerObj.headline = maker.headline;
              makerObj.name = maker.name;
              makerObj.username = maker.username;
              makerObj.profile_url = maker.profile_url;
              makerObj.website_url = maker.website_url;
              preppedResult.kiwi_makers.push(makerObj);
            }
            preppedResult.kiwi_exact_match = true;
            preppedResult.kiwi_score = preppedResult.vote_count;
            preppedResult.kiwi_num_comments = preppedResult.comment_count;
            preppedResult.kiwi_permaId = preppedResult.permalink;
            matchedListings.push(preppedResult);
          }
        }
      }
      return matchedListings;
    },
    reddit: function(resultsObj, searchQueryString, serviceInfo, customSearchBool) {
      var forEachQueryObject, matchedListings, result, _i, _len;
      if (customSearchBool == null) {
        customSearchBool = false;
      }
      matchedListings = [];
      if (resultsObj === null) {
        return matchedListings;
      }
      forEachQueryObject = function(resultsObj, _matchedListings) {
        var child, listingKeys, preppedResult, _i, _len, _ref;
        if ((resultsObj.kind != null) && resultsObj.kind === "Listing" && (resultsObj.data != null) && (resultsObj.data.children != null) && resultsObj.data.children.length > 0) {
          _ref = resultsObj.data.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            if ((child.data != null) && (child.kind != null) && child.kind === "t3") {
              listingKeys = ["subreddit", 'url', "score", 'domain', 'gilded', "over_18", "author", "hidden", "downs", "permalink", "created", "title", "created_utc", "ups", "num_comments"];
              preppedResult = _.pick(child.data, listingKeys);
              preppedResult.kiwi_created_at = preppedResult.created_utc * 1000;
              if (customSearchBool === false) {
                preppedResult.kiwi_exact_match = _exact_match_url_check(searchQueryString, preppedResult.url);
              } else {
                preppedResult.kiwi_exact_match = true;
              }
              preppedResult.kiwi_score = preppedResult.score;
              preppedResult.kiwi_num_comments = preppedResult.num_comments;
              preppedResult.kiwi_permaId = preppedResult.permalink;
              _matchedListings.push(preppedResult);
            }
          }
        }
        return _matchedListings;
      };
      if (_.isArray(resultsObj)) {
        for (_i = 0, _len = resultsObj.length; _i < _len; _i++) {
          result = resultsObj[_i];
          matchedListings = forEachQueryObject(result, matchedListings);
        }
      } else {
        matchedListings = forEachQueryObject(resultsObj, matchedListings);
      }
      return matchedListings;
    },
    hackerNews: function(resultsObj, searchQueryString, serviceInfo, customSearchBool) {
      var hit, listingKeys, matchedListings, preppedResult, _i, _len, _ref;
      if (customSearchBool == null) {
        customSearchBool = false;
      }
      matchedListings = [];
      if (resultsObj === null) {
        return matchedListings;
      }
      if ((resultsObj != null) && (resultsObj.hits != null)) {
        _ref = resultsObj.hits;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hit = _ref[_i];
          listingKeys = ["points", "num_comments", "objectID", "author", "created_at", "title", "url", "created_at_i", "story_text", "comment_text", "story_id", "story_title", "story_url"];
          preppedResult = _.pick(hit, listingKeys);
          preppedResult.kiwi_created_at = preppedResult.created_at_i * 1000;
          if (customSearchBool === false) {
            preppedResult.kiwi_exact_match = _exact_match_url_check(searchQueryString, preppedResult.url);
          } else {
            preppedResult.kiwi_exact_match = true;
          }
          preppedResult.kiwi_score = preppedResult.points;
          preppedResult.kiwi_num_comments = preppedResult.num_comments;
          preppedResult.kiwi_permaId = preppedResult.objectID;
          matchedListings.push(preppedResult);
        }
      }
      return matchedListings;
    },
    gnews: function(resultsObj, searchQueryString, serviceInfo, customSearchBool) {
      var child, currentTime, forUrl, listing, listingKeys, matchedListings, noteworthy, preppedResult, __numberOfRelatedItemsWithClusterURL, __numberOfStoriesFoundWithinTheHoursSincePostedLimit, _i, _j, _k, _len, _len1, _len2;
      if (customSearchBool == null) {
        customSearchBool = false;
      }
      if (resultsObj === null) {
        return matchedListings;
      }
      if (customSearchBool === false) {
        forUrl = searchQueryString;
        matchedListings = [];
        for (_i = 0, _len = resultsObj.length; _i < _len; _i++) {
          child = resultsObj[_i];
          listingKeys = ['clusterUrl', 'publisher', 'content', 'publishedDate', 'unescapedUrl', 'titleNoFormatting'];
          preppedResult = _.pick(child, listingKeys);
          preppedResult.kiwi_created_at = Date.parse(preppedResult.publishedDate);
          preppedResult.kiwi_exact_match = false;
          preppedResult.kiwi_score = null;
          preppedResult.kiwi_permaId = preppedResult.unescapedUrl;
          if (customSearchBool === false) {
            preppedResult.kiwi_exact_match = _exact_match_url_check(forUrl, preppedResult.url);
          } else {
            preppedResult.kiwi_exact_match = true;
          }
          preppedResult.kiwi_searchedFor = tabTitleObject.tabTitle;
          if (preppedResult.unescapedUrl !== forUrl) {
            matchedListings.push(preppedResult);
          } else if (preppedResult.clusterUrl !== '') {
            matchedListings.push(preppedResult);
          }
        }
        currentTime = Date.now();
        noteworthy = false;
        __numberOfStoriesFoundWithinTheHoursSincePostedLimit = 0;
        __numberOfRelatedItemsWithClusterURL = 0;
        for (_j = 0, _len1 = matchedListings.length; _j < _len1; _j++) {
          listing = matchedListings[_j];
          if ((listing.clusterUrl != null) && listing.clusterUrl !== '') {
            __numberOfRelatedItemsWithClusterURL++;
          }
          if ((currentTime - listing.kiwi_created_at) < serviceInfo.notableConditions.hoursSincePosted * 3600000) {
            __numberOfStoriesFoundWithinTheHoursSincePostedLimit++;
          }
        }
        if (__numberOfStoriesFoundWithinTheHoursSincePostedLimit >= serviceInfo.notableConditions.numberOfStoriesFoundWithinTheHoursSincePostedLimit) {
          noteworthy = true;
        }
        if (__numberOfRelatedItemsWithClusterURL >= serviceInfo.notableConditions.numberOfRelatedItemsWithClusterURL) {
          noteworthy = true;
        }
        if (noteworthy) {
          matchedListings[0].kiwi_exact_match = true;
        }
        return matchedListings;
      } else {
        matchedListings = [];
        for (_k = 0, _len2 = resultsObj.length; _k < _len2; _k++) {
          child = resultsObj[_k];
          listingKeys = ['clusterUrl', 'publisher', 'content', 'publishedDate', 'unescapedUrl', 'titleNoFormatting'];
          preppedResult = _.pick(child, listingKeys);
          preppedResult.kiwi_created_at = Date.parse(preppedResult.publishedDate);
          preppedResult.kiwi_exact_match = false;
          preppedResult.kiwi_score = null;
          preppedResult.kiwi_permaId = preppedResult.unescapedUrl;
          preppedResult.kiwi_searchedFor = searchQueryString;
          preppedResult.kiwi_exact_match = false;
          matchedListings.push(preppedResult);
        }
        return matchedListings;
      }
    }
  };

  _exact_match_url_check = function(forUrl, preppedResultUrl) {
    var altUrl, cSindex, checkArray, checkString, existState, existState_, existState_Char, existState__, existStates, forUrlUnmodded, forUrl_, index, index_, kiwi_exact_match, m, mod, modKey, modPermutations, mod_, moddedUrl, modifications, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p;
    kiwi_exact_match = false;
    modifications = [
      {
        name: 'trailingSlash',
        modify: function(tOrF, forUrl) {
          var noTrailingSlashURL, trailingSlashURL;
          if (tOrF === 't') {
            if (forUrl[forUrl.length - 1] !== '/') {
              trailingSlashURL = forUrl + '/';
            } else {
              trailingSlashURL = forUrl;
            }
            return trailingSlashURL;
          } else {
            if (forUrl[forUrl.length - 1] === '/') {
              noTrailingSlashURL = forUrl.substr(0, forUrl.length - 1);
            } else {
              noTrailingSlashURL = forUrl;
            }
            return noTrailingSlashURL;
          }
        },
        existsTest: function(forUrl) {
          if (forUrl[forUrl.length - 1] === '/') {
            return 't';
          } else {
            return 'f';
          }
        }
      }, {
        name: 'www',
        modify: function(tOrF, forUrl) {
          var WWWurl, noWWWurl, protocolSplitUrlArray, wwwSplitUrlArray;
          if (tOrF === 't') {
            protocolSplitUrlArray = forUrl.split('://');
            if (protocolSplitUrlArray.length > 1) {
              if (protocolSplitUrlArray[1].indexOf('www.') !== 0) {
                protocolSplitUrlArray[1] = 'www.' + protocolSplitUrlArray[1];
                WWWurl = protocolSplitUrlArray.join('://');
              } else {
                WWWurl = forUrl;
              }
              return WWWurl;
            } else {
              if (protocolSplitUrlArray[0].indexOf('www.') !== 0) {
                protocolSplitUrlArray[0] = 'www.' + protocolSplitUrlArray[1];
                WWWurl = protocolSplitUrlArray.join('://');
              } else {
                WWWurl = forUrl;
              }
              return WWWurl;
            }
          } else {
            wwwSplitUrlArray = forUrl.split('www.');
            if (wwwSplitUrlArray.length === 2) {
              noWWWurl = wwwSplitUrlArray.join('');
            } else if (wwwSplitUrlArray.length > 2) {
              noWWWurl = wwwSplitUrlArray.shift();
              noWWWurl += wwwSplitUrlArray.shift();
              noWWWurl += wwwSplitUrlArray.join('www.');
            } else {
              noWWWurl = forUrl;
            }
            return noWWWurl;
          }
        },
        existsTest: function(forUrl) {
          if (forUrl.split('//www.').length > 0) {
            return 't';
          } else {
            return 'f';
          }
        }
      }, {
        name: 'http',
        existsTest: function(forUrl) {
          if (forUrl.indexOf('http://') === 0) {
            return 't';
          } else {
            return 'f';
          }
        },
        modify: function(tOrF, forUrl) {
          var HTTPSurl, HTTPurl;
          if (tOrF === 't') {
            if (forUrl.indexOf('https://') === 0) {
              return HTTPurl = 'http://' + forUrl.substr(8, forUrl.length - 1);
            } else {
              return HTTPurl = forUrl;
            }
          } else {
            if (forUrl.indexOf('http://') === 0) {
              return HTTPSurl = 'https://' + forUrl.substr(7, forUrl.length - 1);
            } else {
              return HTTPSurl = forUrl;
            }
          }
        }
      }
    ];
    modPermutations = {};
    forUrlUnmodded = '';
    for (_i = 0, _len = modifications.length; _i < _len; _i++) {
      mod = modifications[_i];
      forUrlUnmodded += mod.existsTest(forUrl);
    }
    modPermutations[forUrlUnmodded] = forUrl;
    existStates = ['t', 'f'];
    for (_j = 0, _len1 = existStates.length; _j < _len1; _j++) {
      existState = existStates[_j];
      for (index = _k = 0, _len2 = modifications.length; _k < _len2; index = ++_k) {
        mod = modifications[index];
        checkArray = [];
        for (_l = 0, _len3 = modifications.length; _l < _len3; _l++) {
          m = modifications[_l];
          checkArray.push(existState);
        }
        forUrl_ = modifications[index].modify(existState, forUrl);
        for (_m = 0, _len4 = existStates.length; _m < _len4; _m++) {
          existState_ = existStates[_m];
          checkArray[index] = existState_;
          for (index_ = _n = 0, _len5 = modifications.length; _n < _len5; index_ = ++_n) {
            mod_ = modifications[index_];
            if (index !== index_) {
              for (_o = 0, _len6 = existStates.length; _o < _len6; _o++) {
                existState__ = existStates[_o];
                checkArray[index_] = existState__;
                checkString = checkArray.join('');
                if (modPermutations[checkString] == null) {
                  altUrl = forUrl_;
                  for (cSindex = _p = 0, _len7 = checkString.length; _p < _len7; cSindex = ++_p) {
                    existState_Char = checkString[cSindex];
                    altUrl = modifications[cSindex].modify(existState_Char, altUrl);
                  }
                  modPermutations[checkString] = altUrl;
                }
              }
            }
          }
        }
      }
    }
    kiwi_exact_match = false;
    if (preppedResultUrl === forUrl) {
      kiwi_exact_match = true;
    }
    for (modKey in modPermutations) {
      moddedUrl = modPermutations[modKey];
      if (preppedResultUrl === moddedUrl) {
        kiwi_exact_match = true;
      }
    }
    return kiwi_exact_match;
  };

  refreshBadge = function(servicesInfo, resultsObjForCurrentUrl) {
    var abbreviationLettersArray, badgeText, currentTime, exactMatch, index, listing, noteworthy, service, _i, _j, _len, _len1, _ref;
    currentTime = Date.now();
    abbreviationLettersArray = [];
    for (index = _i = 0, _len = servicesInfo.length; _i < _len; index = ++_i) {
      service = servicesInfo[index];
      if (service.name === "gnews") {
        if ((resultsObjForCurrentUrl[service.name] != null) && resultsObjForCurrentUrl[service.name].service_PreppedResults.length > 0) {
          noteworthy = false;
          if (resultsObjForCurrentUrl[service.name].service_PreppedResults[0].kiwi_exact_match === true) {
            noteworthy = true;
          }
          if (noteworthy) {
            abbreviationLettersArray.push(service.abbreviation);
          }
        }
      } else {
        if ((resultsObjForCurrentUrl[service.name] != null) && resultsObjForCurrentUrl[service.name].service_PreppedResults.length > 0) {
          exactMatch = false;
          noteworthy = false;
          _ref = resultsObjForCurrentUrl[service.name].service_PreppedResults;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            listing = _ref[_j];
            if (listing.kiwi_exact_match) {
              exactMatch = true;
              if ((listing.kiwi_num_comments != null) && listing.kiwi_num_comments >= service.notableConditions.num_comments) {
                noteworthy = true;
                break;
              }
              if ((currentTime - listing.kiwi_created_at) < service.notableConditions.hoursSincePosted * 3600000) {
                noteworthy = true;
                break;
              }
            }
          }
          if (service.updateBadgeOnlyWithExactMatch && (exactMatch = false)) {
            break;
          }
          if (noteworthy) {
            abbreviationLettersArray.push(service.abbreviation);
          } else {
            abbreviationLettersArray.push(service.abbreviation.toLowerCase());
          }
        }
      }
    }
    badgeText = '';
    if (abbreviationLettersArray.length === 0) {
      browser.storage.sync.get(null, function(allItemsInSyncedStorage) {
        if ((allItemsInSyncedStorage['kiwi_userPreferences'] != null) && allItemsInSyncedStorage['kiwi_userPreferences'].researchModeOnOff === 'off') {
          return badgeText = 'off';
        } else if (defaultUserPreferences.researchModeOnOff === 'off') {
          return badgeText = 'off';
        } else {
          return badgeText = '';
        }
      });
    } else {
      badgeText = abbreviationLettersArray.join(" ");
    }
    return updateBadgeText(badgeText);
  };

  updateBadgeText = function(text) {
    return browser.browserAction.setBadgeText({
      'text': text.toString()
    });
  };

  periodicCleanup = function(tab, allItemsInLocalStorage, allItemsInSyncedStorage, initialize_callback) {
    var cull_kiwi_urlsResultsCache, currentTime, deletedCount, num_results_to_delete, serviceKey, serviceResults, url, urlServiceResults;
    currentTime = Date.now();
    if (last_periodicCleanup < (currentTime - CLEANUP_INTERVAL)) {
      last_periodicCleanup = currentTime;
      if (Object.keys(kiwi_urlsResultsCache).length === 0) {
        return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
      } else {
        cull_kiwi_urlsResultsCache = _.extend({}, kiwi_urlsResultsCache);
        for (url in cull_kiwi_urlsResultsCache) {
          urlServiceResults = cull_kiwi_urlsResultsCache[url];
          for (serviceKey in urlServiceResults) {
            serviceResults = urlServiceResults[serviceKey];
            if (currentTime - serviceResults.timestamp > checkForUrlHourInterval) {
              delete kiwi_urlsResultsCache[url];
            }
          }
        }
        if (Object.keys(kiwi_urlsResultsCache).length > maxUrlResultsStoredInLocalStorage) {
          num_results_to_delete = Object.keys(kiwi_urlsResultsCache).length - maxUrlResultsStoredInLocalStorage;
          deletedCount = 0;
          cull_kiwi_urlsResultsCache = _.extend({}, kiwi_urlsResultsCache);
          for (url in cull_kiwi_urlsResultsCache) {
            urlServiceResults = cull_kiwi_urlsResultsCache[url];
            if (deleteCount >= num_results_to_delete) {
              break;
            }
            if (url !== tab.url) {
              delete kiwi_urlsResultsCache[url];
              deletedCount++;
            }
          }
          return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
        } else {
          return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
        }
      }
    } else {
      return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
    }
  };

  _save_from_popupParcel = function(_popupParcel, forUrl, updateToView) {
    var formerKiwi_servicesInfo, formerResearchModeValue, former_autoOffTimerType, former_autoOffTimerValue, resetTimerBool, _autoOffAtUTCmilliTimestamp;
    formerResearchModeValue = null;
    formerKiwi_servicesInfo = null;
    former_autoOffTimerType = null;
    former_autoOffTimerValue = null;
    if ((popupParcel != null) && (popupParcel.kiwi_userPreferences != null) && popupParcel.kiwi_servicesInfo) {
      formerResearchModeValue = popupParcel.kiwi_userPreferences.researchModeOnOff;
      formerKiwi_servicesInfo = popupParcel.kiwi_servicesInfo;
      former_autoOffTimerType = popupParcel.kiwi_userPreferences.autoOffTimerType;
      former_autoOffTimerValue = popupParcel.kiwi_userPreferences.autoOffTimerValue;
    }
    popupParcel = {};
    if ((formerResearchModeValue != null) && formerResearchModeValue === 'off' && (_popupParcel.kiwi_userPreferences != null) && _popupParcel.kiwi_userPreferences.researchModeOnOff === 'on' || (former_autoOffTimerType !== _popupParcel.kiwi_userPreferences.autoOffTimerType || former_autoOffTimerValue !== _popupParcel.kiwi_userPreferences.autoOffTimerValue)) {
      resetTimerBool = true;
    } else {
      resetTimerBool = false;
    }
    _autoOffAtUTCmilliTimestamp = setAutoOffTimer(resetTimerBool, _popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp, _popupParcel.kiwi_userPreferences.autoOffTimerValue, _popupParcel.kiwi_userPreferences.autoOffTimerType, _popupParcel.kiwi_userPreferences.researchModeOnOff);
    _popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp = _autoOffAtUTCmilliTimestamp;
    return browser.storage.sync.set({
      'kiwi_userPreferences': _popupParcel.kiwi_userPreferences
    }, function() {
      return browser.storage.sync.set({
        'kiwi_servicesInfo': _popupParcel.kiwi_servicesInfo
      }, function() {
        var formerActiveServicesList, newActiveServicesList, parcel;
        if (updateToView != null) {
          parcel = {};
          _popupParcel['view'] = updateToView;
          popupParcel = _popupParcel;
          parcel.msg = 'kiwiPP_popupParcel_ready';
          parcel.forUrl = tabUrl;
          parcel.popupParcel = _popupParcel;
          sendParcel(parcel);
        }
        if (_popupParcel.forUrl === tabUrl) {
          if ((formerResearchModeValue != null) && formerResearchModeValue === 'off' && (_popupParcel.kiwi_userPreferences != null) && _popupParcel.kiwi_userPreferences.researchModeOnOff === 'on') {
            initIfNewURL(true);
            return 0;
          } else if (formerKiwi_servicesInfo != null) {
            formerActiveServicesList = _.pluck(formerKiwi_servicesInfo, 'active');
            newActiveServicesList = _.pluck(_popupParcel.kiwi_servicesInfo, 'active');
            if (!_.isEqual(formerActiveServicesList, newActiveServicesList)) {
              initIfNewURL(true);
              return 0;
            } else {
              refreshBadge(_popupParcel.kiwi_servicesInfo, _popupParcel.allPreppedResults);
              return 0;
            }
          } else {
            refreshBadge(_popupParcel.kiwi_servicesInfo, _popupParcel.allPreppedResults);
            return 0;
          }
        }
      });
    });
  };

  setAutoOffTimer = function(resetTimerBool, autoOffAtUTCmilliTimestamp, autoOffTimerValue, autoOffTimerType, researchModeOnOff) {
    var currentTime, new_autoOffAtUTCmilliTimestamp;
    if (resetTimerBool && (kiwi_autoOffClearInterval != null)) {
      clearTimeout(kiwi_autoOffClearInterval);
      kiwi_autoOffClearInterval = null;
    }
    currentTime = Date.now();
    new_autoOffAtUTCmilliTimestamp = null;
    if (researchModeOnOff === 'on') {
      if (autoOffAtUTCmilliTimestamp === null || resetTimerBool) {
        if (autoOffTimerType === '20') {
          new_autoOffAtUTCmilliTimestamp = currentTime + 20 * 60 * 1000;
        } else if (autoOffTimerType === '60') {
          new_autoOffAtUTCmilliTimestamp = currentTime + 60 * 60 * 1000;
        } else if (autoOffTimerType === 'always') {
          new_autoOffAtUTCmilliTimestamp = null;
        } else if (autoOffTimerType === 'custom') {
          new_autoOffAtUTCmilliTimestamp = currentTime + parseInt(autoOffTimerValue) * 60 * 1000;
        }
      } else {
        new_autoOffAtUTCmilliTimestamp = autoOffAtUTCmilliTimestamp;
        if ((kiwi_autoOffClearInterval == null) && autoOffAtUTCmilliTimestamp > currentTime) {
          kiwi_autoOffClearInterval = setTimeout(function() {
            return turnResearchModeOff();
          }, new_autoOffAtUTCmilliTimestamp - currentTime);
        }
        return new_autoOffAtUTCmilliTimestamp;
      }
    } else {
      new_autoOffAtUTCmilliTimestamp = null;
      if (kiwi_autoOffClearInterval != null) {
        clearTimeout(kiwi_autoOffClearInterval);
        kiwi_autoOffClearInterval = null;
      }
    }
    if (new_autoOffAtUTCmilliTimestamp !== null) {
      kiwi_autoOffClearInterval = setTimeout(function() {
        return turnResearchModeOff();
      }, new_autoOffAtUTCmilliTimestamp - currentTime);
    }
    return new_autoOffAtUTCmilliTimestamp;
  };

  turnResearchModeOff = function() {
    return browser.storage.sync.get(null, function(allItemsInSyncedStorage) {
      var urlResults;
      if (kiwi_urlsResultsCache[tabUrl] != null) {
        urlResults = kiwi_urlsResultsCache[tabUrl];
      } else {
        urlResults = {};
      }
      if (allItemsInSyncedStorage.kiwi_userPreferences != null) {
        allItemsInSyncedStorage.kiwi_userPreferences.researchModeOnOff = 'off';
        return browser.storage.sync.set({
          'kiwi_userPreferences': allItemsInSyncedStorage.kiwi_userPreferences
        }, function() {
          _set_popupParcel(urlResults, tabUrl, true);
          if (allItemsInSyncedStorage.kiwi_servicesInfo != null) {
            return refreshBadge(allItemsInSyncedStorage.kiwi_servicesInfo, urlResults);
          }
        });
      } else {
        defaultUserPreferences.researchModeOnOff = 'off';
        return browser.storage.sync.set({
          'kiwi_userPreferences': defaultUserPreferences
        }, function() {
          _set_popupParcel(urlResults, tabUrl, true);
          if (allItemsInSyncedStorage.kiwi_servicesInfo != null) {
            return refreshBadge(allItemsInSyncedStorage.kiwi_servicesInfo, urlResults);
          }
        });
      }
    });
  };

  autoOffTimerExpired_orOff_withoutURLoverride = function(allItemsInSyncedStorage, currentTime, overrideResearchModeOff, tabUrl, kiwi_urlsResultsCache) {
    if (allItemsInSyncedStorage.kiwi_userPreferences != null) {
      if (allItemsInSyncedStorage.kiwi_userPreferences.autoOffAtUTCmilliTimestamp != null) {
        if (currentTime > allItemsInSyncedStorage.kiwi_userPreferences.autoOffAtUTCmilliTimestamp) {
          allItemsInSyncedStorage.kiwi_userPreferences.researchModeOnOff = 'off';
        }
      }
      if (allItemsInSyncedStorage.kiwi_userPreferences.researchModeOnOff === 'off' && overrideResearchModeOff === false) {
        updateBadgeText('off');
        return true;
      }
      return false;
    }
  };

  proceedWithPreInitCheck = function(allItemsInSyncedStorage, allItemsInLocalStorage, overrideSameURLCheck_popupOpen, overrideResearchModeOff, sameURLCheck, tabUrl, currentTime, popupOpen) {
    var isUrlWhitelistedBool;
    if ((allItemsInSyncedStorage['kiwi_userPreferences'] != null) && overrideResearchModeOff === false) {
      isUrlWhitelistedBool = is_url_whitelisted(allItemsInSyncedStorage['kiwi_userPreferences'].urlSubstring_whitelists, tabUrl);
      overrideResearchModeOff = isUrlWhitelistedBool;
    }
    if (autoOffTimerExpired_orOff_withoutURLoverride(allItemsInSyncedStorage, currentTime, overrideResearchModeOff, tabUrl, kiwi_urlsResultsCache) === true) {
      if (kiwi_urlsResultsCache[tabUrl] != null) {
        _set_popupParcel(kiwi_urlsResultsCache[tabUrl], tabUrl, false);
        if (allItemsInSyncedStorage['kiwi_servicesInfo'] != null) {
          return refreshBadge(allItemsInSyncedStorage['kiwi_servicesInfo'], kiwi_urlsResultsCache[tabUrl]);
        }
      } else {
        return _set_popupParcel({}, tabUrl, true);
      }
    } else {
      return periodicCleanup(tabUrl, allItemsInLocalStorage, allItemsInSyncedStorage, function(tabUrl, allItemsInLocalStorage, allItemsInSyncedStorage) {
        var isUrlBlocked, setObj, _autoOffAtUTCmilliTimestamp;
        if (allItemsInSyncedStorage['kiwi_userPreferences'] == null) {
          _autoOffAtUTCmilliTimestamp = setAutoOffTimer(false, defaultUserPreferences.autoOffAtUTCmilliTimestamp, defaultUserPreferences.autoOffTimerValue, defaultUserPreferences.autoOffTimerType, defaultUserPreferences.researchModeOnOff);
          defaultUserPreferences.autoOffAtUTCmilliTimestamp = _autoOffAtUTCmilliTimestamp;
          setObj = {
            kiwi_servicesInfo: defaultServicesInfo,
            kiwi_userPreferences: defaultUserPreferences
          };
          return browser.storage.sync.set(setObj, function() {
            var isUrlBlocked;
            isUrlBlocked = is_url_blocked(defaultUserPreferences.urlSubstring_blacklists, tabUrl);
            if (isUrlBlocked === true && overrideResearchModeOff === false) {
              updateBadgeText('block');
              _set_popupParcel({}, tabUrl, true);
              return 0;
            }
            return initialize(tabUrl);
          });
        } else {
          isUrlBlocked = is_url_blocked(allItemsInSyncedStorage['kiwi_userPreferences'].urlSubstring_blacklists, tabUrl);
          if (isUrlBlocked === true && overrideResearchModeOff === false) {
            updateBadgeText('block');
            _set_popupParcel({}, tabUrl, true);
            return 0;
          }
          return initialize(tabUrl);
        }
      });
    }
  };

  checkForNewDefaultUserPreferenceAttributes_thenProceedWithInitCheck = function(allItemsInSyncedStorage, allItemsInLocalStorage, overrideSameURLCheck_popupOpen, overrideResearchModeOff, sameURLCheck, tabUrl, currentTime, popupOpen) {
    var index, indexOfServiceToReplace, keyName, matchingService, newServiceObj, newServicesInfo, newServicesInfoAttribute, newUserPreferences, newUserPrefsAttribute, service_default, setObj, value, _i, _len;
    setObj = {};
    newUserPrefsAttribute = false;
    newServicesInfoAttribute = false;
    newServicesInfo = [];
    newUserPreferences = {};
    if (allItemsInSyncedStorage['kiwi_userPreferences'] != null) {
      newUserPreferences = _.extend({}, allItemsInSyncedStorage['kiwi_userPreferences']);
      for (keyName in defaultUserPreferences) {
        value = defaultUserPreferences[keyName];
        if (typeof allItemsInSyncedStorage['kiwi_userPreferences'][keyName] === 'undefined') {
          newUserPrefsAttribute = true;
          newUserPreferences[keyName] = value;
        }
      }
    }
    if (allItemsInSyncedStorage['kiwi_servicesInfo'] != null) {
      newServicesInfo = _.extend([], allItemsInSyncedStorage['kiwi_servicesInfo']);
      for (index = _i = 0, _len = defaultServicesInfo.length; _i < _len; index = ++_i) {
        service_default = defaultServicesInfo[index];
        matchingService = _.find(allItemsInSyncedStorage['kiwi_servicesInfo'], function(service_info) {
          if (service_info.name === service_default.name) {
            return true;
          } else {
            return false;
          }
        });
        if (matchingService != null) {
          newServiceObj = _.extend({}, matchingService);
          for (keyName in service_default) {
            value = service_default[keyName];
            if (typeof matchingService[keyName] === 'undefined') {
              newServicesInfoAttribute = true;
              newServiceObj[keyName] = value;
            }
          }
          indexOfServiceToReplace = _.indexOf(newServicesInfo, matchingService);
          newServicesInfo[indexOfServiceToReplace] = newServiceObj;
        } else {
          newServicesInfoAttribute = true;
          if (service_default.active != null) {
            service_default.active = 'off';
          }
          newServicesInfo.push(service_default);
        }
      }
    }
    if (newUserPrefsAttribute || newServicesInfoAttribute) {
      if (newUserPrefsAttribute) {
        setObj['kiwi_userPreferences'] = newUserPreferences;
      }
      if (newServicesInfoAttribute) {
        setObj['kiwi_servicesInfo'] = newServicesInfo;
      }
      return browser.storage.sync.set(setObj, function() {
        if (newUserPrefsAttribute) {
          allItemsInSyncedStorage['kiwi_userPreferences'] = newUserPreferences;
        }
        if (newServicesInfoAttribute) {
          allItemsInSyncedStorage['kiwi_servicesInfo'] = newServicesInfo;
        }
        return proceedWithPreInitCheck(allItemsInSyncedStorage, allItemsInLocalStorage, overrideSameURLCheck_popupOpen, overrideResearchModeOff, sameURLCheck, tabUrl, currentTime, popupOpen);
      });
    } else {
      return proceedWithPreInitCheck(allItemsInSyncedStorage, allItemsInLocalStorage, overrideSameURLCheck_popupOpen, overrideResearchModeOff, sameURLCheck, tabUrl, currentTime, popupOpen);
    }
  };

  initIfNewURL = function(overrideSameURLCheck_popupOpen, overrideResearchModeOff) {
    var currentTime;
    if (overrideSameURLCheck_popupOpen == null) {
      overrideSameURLCheck_popupOpen = false;
    }
    if (overrideResearchModeOff == null) {
      overrideResearchModeOff = false;
    }
    if (typeof overrideSameURLCheck_popupOpen !== 'boolean') {
      overrideSameURLCheck_popupOpen = false;
    }
    if (overrideSameURLCheck_popupOpen) {
      popupOpen = true;
    } else {
      popupOpen = false;
    }
    currentTime = Date.now();
    return browser.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      var tabUrl_hash, tabUrl_hashWordArray, title;
      if (tabs.length > 0 && (tabs[0].url != null)) {
        if (tabs[0].url.indexOf('chrome-devtools://') !== 0) {
          tabUrl = tabs[0].url;
          if (tabs[0].status === 'complete') {
            title = tabs[0].title;
            if (title.length > 3 && title[0] === "(" && isNaN(title[1]) === false && title.indexOf(')') !== -1 && title.indexOf(')') !== title.length - 1) {
              title = title.slice(title.indexOf(')') + 1, title.length).trim();
            }
            tabTitleObject = {
              tabTitle: title,
              forUrl: tabUrl
            };
          } else {
            tabTitleObject = {
              tabTitle: null,
              forUrl: tabUrl
            };
          }
        } else {
          _set_popupParcel({}, tabUrl, false);
          return 0;
        }
        tabUrl_hashWordArray = CryptoJS.SHA512(tabUrl);
        tabUrl_hash = tabUrl_hashWordArray.toString(CryptoJS.enc.Latin1);
        return browser.storage.local.get(null, function(allItemsInLocalStorage) {
          var historyString, sameURLCheck;
          sameURLCheck = true;
          historyString = reduceHashByHalf(tabUrl_hash);
          if (allItemsInLocalStorage.persistentUrlHash == null) {
            allItemsInLocalStorage.persistentUrlHash = '';
          }
          if (overrideSameURLCheck_popupOpen === false && (allItemsInLocalStorage['kiwi_historyBlob'] != null) && allItemsInLocalStorage['kiwi_historyBlob'].indexOf(historyString) !== -1 && ((kiwi_urlsResultsCache == null) || (kiwi_urlsResultsCache[tabUrl] == null))) {
            updateBadgeText('old');
            sameURLCheck = true;
            _set_popupParcel({}, tabUrl, false, null, true);
          } else if ((overrideSameURLCheck_popupOpen === false && (allItemsInLocalStorage.persistentUrlHash == null)) || (allItemsInLocalStorage.persistentUrlHash != null) && allItemsInLocalStorage.persistentUrlHash !== tabUrl_hash) {
            sameURLCheck = false;
          } else if (overrideSameURLCheck_popupOpen === true) {
            sameURLCheck = false;
          }
          browser.storage.local.set({
            'persistentUrlHash': tabUrl_hash
          }, function() {});
          if (sameURLCheck === false) {
            updateBadgeText('');
            return browser.storage.sync.get(null, function(allItemsInSyncedStorage) {
              return checkForNewDefaultUserPreferenceAttributes_thenProceedWithInitCheck(allItemsInSyncedStorage, allItemsInLocalStorage, overrideSameURLCheck_popupOpen, overrideResearchModeOff, sameURLCheck, tabUrl, currentTime, popupOpen);
            });
          }
        });
      }
    });
  };

  browser.tabs.onActivated.addListener(function() {
    return initIfNewURL();
  });

  browser.tabs.onUpdated.addListener(function(tabId, info) {
    if ((tabTitleObject != null) && tabTitleObject.forUrl === tabUrl && (tabTitleObject.tabTitle == null)) {
      if (info.status === "complete") {
        initIfNewURL(true);
        return 0;
      }
    } else {
      return initIfNewURL();
    }
  });

  browser.windows.onFocusChanged.addListener(function() {
    return initIfNewURL();
  });

  if (tabTitleObject === null) {
    initIfNewURL(true);
  }

  reduceHashByHalf = function(hash, reducedByAFactorOf) {
    var counter, finalHash, reduceStringByHalf;
    if (reducedByAFactorOf == null) {
      reducedByAFactorOf = 1;
    }
    reduceStringByHalf = function(_string_) {
      var char, index, newShortenedString, _i, _len;
      newShortenedString = '';
      for (index = _i = 0, _len = _string_.length; _i < _len; index = ++_i) {
        char = _string_[index];
        if (index % 2 === 0 && (_string_.length - 1 > index + 1)) {
          char = char > _string_[index + 1] ? char : _string_[index + 1];
          newShortenedString += char;
        }
      }
      return newShortenedString;
    };
    finalHash = '';
    counter = 0;
    while (counter < reducedByAFactorOf) {
      hash = reduceStringByHalf(hash);
      counter++;
    }
    return hash;
  };

}).call(this);
