// Generated by CoffeeScript 1.9.0
(function() {
  var Conversations, Credits, CustomSearch, FixedView, KiwiSlice, Loading, MessageCenter, SwitchView, UserPreferences, View, Widget, bindGoToViewButtons, capitalizeFirstLetter, fixedViews, formatTime, getRandom, getURLParam, htmlEntities, initialize, moveArrayElement, preferencesOnlyPage, receiveParcel, renderExtensionHeight, renderedBool, sendParcel, switchViews, tailorRedditAndHNresults_returnHtml, tailorResults, viewElementId, _tailorHNcomment,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  viewElementId = '';

  renderedBool = false;

  preferencesOnlyPage = false;

  initialize = function(popupParcel) {
    var view, viewName;
    console.log('in init with popupParcel');
    console.debug(popupParcel);
    if (getURLParam(window.location, 'optionsOnly') !== '') {
      preferencesOnlyPage = true;
      switchViews.userPreferences.render(popupParcel);
      return 0;
    }
    for (viewName in fixedViews) {
      view = fixedViews[viewName];
      view.init(popupParcel);
    }
    if ((popupParcel.view != null) && (switchViews[popupParcel.view] != null)) {
      return switchViews[popupParcel.view].render(popupParcel);
    } else {
      return switchViews.conversations.render(popupParcel);
    }
  };

  Widget = (function() {
    function Widget(_at_name, _at_parentView, _at___renderStates__) {
      this.name = _at_name;
      this.parentView = _at_parentView;
      this.__renderStates__ = _at___renderStates__;
      this.elsToUnbind = [];
      this.totalRenders = 0;
      this.DOMselector = this.parentView.DOMselector + " #" + this.name + "_Widget";
      this.Widgets = {};
      this.bindAllGoToViewButtons = (function(_this) {
        return function(viewData) {
          var els_goTo_view, viewValue, _results, _viewName;
          _results = [];
          for (_viewName in switchViews) {
            viewValue = switchViews[_viewName];
            els_goTo_view = $(_this.DOMselector + ' .goTo_' + _viewName + 'View');
            _this.elsToUnbind.push(els_goTo_view);
            _results.push(bindGoToViewButtons(els_goTo_view, _viewName, viewData));
          }
          return _results;
        };
      })(this);
      this.unbindWidget = (function(_this) {
        return function() {
          var el, widget, _i, _j, _len, _len1, _ref, _ref1, _results;
          _ref = _this.elsToUnbind;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            el.unbind();
          }
          _this.elsToUnbind = [];
          _ref1 = _this.Widgets;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            widget = _ref1[_j];
            _results.push(widget.unbindWidget());
          }
          return _results;
        };
      })(this);
      this.render = (function(_this) {
        return function(renderState, popupParcel) {
          _this.totalRenders++;
          _this.unbindWidget(_this.name);
          _this.renderStates[renderState].paint(popupParcel);
          _this.bindAllGoToViewButtons(popupParcel);
          return _this.renderStates[renderState].bind(popupParcel);
        };
      })(this);
      this.renderStates = this.__renderStates__();
      return this;
    }

    return Widget;

  })();

  MessageCenter = (function(_super) {
    __extends(MessageCenter, _super);

    function MessageCenter(_at_name, _at_parentView, _at_widgetOpenBool) {
      this.name = _at_name;
      this.parentView = _at_parentView;
      this.widgetOpenBool = _at_widgetOpenBool;
      this.__renderStates__ = __bind(this.__renderStates__, this);
      MessageCenter.__super__.constructor.call(this, this.name, this.parentView, this.__renderStates__);
    }

    MessageCenter.prototype.init = function(popupParcel) {
      this.unbindWidget();
      return this.render('showMessages', popupParcel);
    };

    MessageCenter.prototype.__renderStates__ = function() {
      return {
        showMessages: {
          paint: (function(_this) {
            return function(popupParcel) {
              var messageObj, messagesHTML, _i, _len, _ref;
              messagesHTML = "";
              if (popupParcel.kiwi_userMessages.length > 0) {
                messagesHTML += '<div style="padding-top:4px; padding-bottom:10px;">';
                _ref = popupParcel.kiwi_userMessages;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  messageObj = _ref[_i];
                  messagesHTML += '<div class="bg-warning" style="margin:6px; padding:8px; text-align:justify;"> <button style="float:right; margin:8px; padding:4px; padding-right:6px; padding-left:6px;" class="btn btn-xs btn-default acknowledgeMessage" data-messageToAcknowledge="' + messageObj.name + '" > <span title="remove" data-messageToAcknowledge="' + messageObj.name + '" class="glyphicon glyphicon-remove" aria-hidden="true" style="color:#E65F5F;" ></span> </button>' + messageObj.baseValue + ' &nbsp; </div>';
                }
                messagesHTML += '<div style="width:100%; text-align:center;"> <b>message priority</b>: urgent. &nbsp;&nbsp; please acknowledge the message(s) by clicking the "x" button(s). Thanks! :) </div></div>';
              }
              return $(_this.DOMselector).html(messagesHTML);
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var ackMessageButtons;
              if (popupParcel.kiwi_userMessages.length > 0) {
                ackMessageButtons = $(_this.DOMselector + ' .acknowledgeMessage');
                _this.elsToUnbind = _this.elsToUnbind.concat(ackMessageButtons);
                return ackMessageButtons.bind('click', function(ev) {
                  var messageToAcknowledge, parcel;
                  messageToAcknowledge = $(ev.target).attr('data-messageToAcknowledge');
                  parcel = {
                    messageToAcknowledge: messageToAcknowledge,
                    msg: 'kiwiPP_acknowledgeMessage'
                  };
                  return sendParcel(parcel);
                });
              }
            };
          })(this)
        }
      };
    };

    return MessageCenter;

  })(Widget);

  CustomSearch = (function(_super) {
    __extends(CustomSearch, _super);

    function CustomSearch(_at_name, _at_parentView, _at_widgetOpenBool) {
      this.name = _at_name;
      this.parentView = _at_parentView;
      this.widgetOpenBool = _at_widgetOpenBool;
      this.__renderStates__ = __bind(this.__renderStates__, this);
      CustomSearch.__super__.constructor.call(this, this.name, this.parentView, this.__renderStates__);
    }

    CustomSearch.prototype.init = function(popupParcel) {
      this.Widgets = {
        messageCenter: new MessageCenter('messageCenter', this, false)
      };
      this.unbindWidget();
      if (this.widgetOpenBool === false) {
        return this.render('collapsed', popupParcel);
      } else {
        return this.render('opened', popupParcel);
      }
    };

    CustomSearch.prototype.__renderStates__ = function() {
      return {
        collapsed: {
          paint: (function(_this) {
            return function(popupParcel) {
              var duplicateFixedHeight, openedCustomSearchHTML;
              openedCustomSearchHTML = '<div class="topSearchBar" style="padding-bottom: 14px;"> <div class="evenlySpacedContainer"> <input class="queryInputOpen" id="customSearchQueryInput" type="text" placeholder=" combined search" /> <button class="btn btn-mini btn-default goTo_userPreferencesView">User Options <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span></button> </div>';
              if ((popupParcel.kiwi_customSearchResults.queryString != null) && popupParcel.kiwi_customSearchResults.queryString !== '') {
                openedCustomSearchHTML += "<div style='padding-top: 12px;'><a id='openPreviousSearch'>see custom results for '" + popupParcel.kiwi_customSearchResults.queryString + "' </a> &nbsp;&nbsp;&nbsp;&nbsp; <a id='clearPreviousSearch'>clear</a></div>";
              }
              openedCustomSearchHTML += "<div id='messageCenter_Widget'></div> </div> <div class='notFixed'></div>";
              $(_this.DOMselector).html(openedCustomSearchHTML);
              duplicateFixedHeight = function() {
                var fixedElHeight;
                fixedElHeight = $(_this.DOMselector + " .topSearchBar").outerHeight();
                if ((popupParcel.kiwi_userMessages != null) && popupParcel.kiwi_userMessages.length > 0) {
                  fixedElHeight += 70 + popupParcel.kiwi_userMessages.length * 60;
                }
                if (fixedElHeight === 0) {
                  return setTimeout(function() {
                    return duplicateFixedHeight();
                  }, 0);
                } else {
                  return $(_this.DOMselector + " .notFixed").css({
                    'height': fixedElHeight + "px"
                  });
                }
              };
              duplicateFixedHeight();
              return _this.Widgets.messageCenter.render('showMessages', popupParcel);
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var clearPreviousSearch, inputSearchQueryInput, previousSearchLink;
              inputSearchQueryInput = $("#customSearchQueryInput");
              previousSearchLink = $("#openPreviousSearch");
              clearPreviousSearch = $("#clearPreviousSearch");
              _this.elsToUnbind = _this.elsToUnbind.concat(inputSearchQueryInput, previousSearchLink, clearPreviousSearch);
              previousSearchLink.bind('click', function() {
                return $("#customSearchQueryInput").click();
              });
              clearPreviousSearch.bind('click', function() {
                var parcel;
                parcel = {
                  msg: 'kiwiPP_refreshSearchQuery'
                };
                return sendParcel(parcel);
              });
              return inputSearchQueryInput.bind('click', function() {
                _this.widgetOpenBool = true;
                return _this.render('opened', popupParcel);
              });
            };
          })(this)
        },
        opened: {
          paint: (function(_this) {
            return function(popupParcel) {
              var activeClass, ariaPressedState, customSearchResultsHTML, duplicateFixedHeight, index, openedCustomSearchHTML, queryString, resultsSummaryArray, serviceDisabledAttr, serviceInfoObject, service_PreppedResults, tagActiveChecked, tagDisabledAttr, tagName, tagObject, _i, _j, _len, _len1, _ref, _ref1, _ref2;
              queryString = popupParcel.kiwi_customSearchResults.queryString != null ? popupParcel.kiwi_customSearchResults.queryString : '';
              openedCustomSearchHTML = '<div class="topSearchBar"> <div class="evenlySpacedContainer"> <input id="customSearchQueryInput" value="' + queryString + '" type="text" placeholder=" combined search" style="width:234px; margin-right: 10px;" /> <button  class="btn btn-mini btn-default" id="customSearchQuerySubmit" style="margin-right: 10px;">Submit</button> <button style="" class="goTo_userPreferencesView btn btn-mini btn-default"> Options <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span></button> </div> <br> <div class="evenlySpacedContainer" style="position: relative; top: -8px; margin-bottom: 3px;">';
              _ref = popupParcel.kiwi_servicesInfo;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                serviceInfoObject = _ref[_i];
                openedCustomSearchHTML += '<div>';
                if (serviceInfoObject.active === 'off') {
                  serviceDisabledAttr = ' disabled title="Service must be active, can be changed in options." ';
                } else {
                  serviceDisabledAttr = ' ';
                }
                if ((popupParcel.kiwi_customSearchResults.servicesSearchesRequested != null) && (popupParcel.kiwi_customSearchResults.servicesSearchesRequested[serviceInfoObject.name] != null)) {
                  activeClass = ' active ';
                  ariaPressedState = 'true';
                } else if (popupParcel.kiwi_customSearchResults.servicesSearchesRequested == null) {
                  activeClass = serviceInfoObject.active === 'off' ? ' ' : ' active ';
                  ariaPressedState = serviceInfoObject.active === 'off' ? 'false' : 'true';
                } else {
                  activeClass = ' ';
                  ariaPressedState = 'false';
                }
                if ((serviceInfoObject.customSearchTags != null) && Object.keys(serviceInfoObject.customSearchTags).length > 0) {
                  openedCustomSearchHTML += '<div class="btn-group"> <button data-toggle="button" aria-pressed="' + ariaPressedState + '" autocomplete="off" ' + serviceDisabledAttr + 'class="servicesToSearch btn btn-default btn-mini dropdownLabel ' + activeClass + '" data-serviceName="' + serviceInfoObject.name + '">' + serviceInfoObject.title + '</button> <button ' + serviceDisabledAttr + ' data-toggle="dropdown" class="btn btn-default dropdown-toggle ' + activeClass + 'dropDownPrefs_' + serviceInfoObject.name + '" data-placeholder="false"><span class="caret"></span></button> <ul class="dropdown-menu">';
                  _ref1 = serviceInfoObject.customSearchTags;
                  for (tagName in _ref1) {
                    tagObject = _ref1[tagName];
                    if ((popupParcel.kiwi_customSearchResults.servicesSearchesRequested != null) && (popupParcel.kiwi_customSearchResults.servicesSearchesRequested[serviceInfoObject.name] != null)) {
                      if (popupParcel.kiwi_customSearchResults.servicesSearchesRequested[serviceInfoObject.name].customSearchTags[tagName] != null) {
                        tagActiveChecked = ' checked ';
                      } else {
                        tagActiveChecked = '';
                      }
                    } else {
                      tagActiveChecked = tagObject.include === true ? ' checked ' : '';
                    }
                    tagDisabledAttr = serviceInfoObject.active === 'off' ? ' disabled title="Service must be active, can be changed in options." ' : '';
                    openedCustomSearchHTML += '<li><input ' + tagActiveChecked + tagDisabledAttr + ' type="checkbox" value="' + tagName + '" class="tagPref tagPref_' + serviceInfoObject.name + '" id="' + serviceInfoObject.name + tagName + '"> <label for="' + serviceInfoObject.name + tagName + '">' + tagObject.title + '</label></li>';
                  }
                  openedCustomSearchHTML += '</ul></div>';
                } else {
                  openedCustomSearchHTML += '<button data-toggle="button" aria-pressed="' + ariaPressedState + '" autocomplete="off" type="button" class="servicesToSearch btn btn-mini btn-default  ' + activeClass + '" data-serviceName="' + serviceInfoObject.name + '">' + serviceInfoObject.title + '</button>';
                }
                openedCustomSearchHTML += '</div>';
              }
              openedCustomSearchHTML += '<div> <button aria-pressed="false" autocomplete="off" type="button" class="btn btn-mini btn-default" id="close__' + _this.name + '" > close <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> </button> </div> </div>';
              openedCustomSearchHTML += '<div id="messageCenter_Widget">asdfasd</div> </div> <div class="notFixed"></div> <div id="customSearchResults"></div>';
              resultsSummaryArray = [];
              customSearchResultsHTML = "";
              if ((popupParcel.kiwi_customSearchResults != null) && (popupParcel.kiwi_customSearchResults.queryString != null) && popupParcel.kiwi_customSearchResults.queryString !== '') {
                _ref2 = popupParcel.kiwi_servicesInfo;
                for (index = _j = 0, _len1 = _ref2.length; _j < _len1; index = ++_j) {
                  serviceInfoObject = _ref2[index];
                  if (popupParcel.kiwi_customSearchResults.servicesSearched[serviceInfoObject.name] != null) {
                    service_PreppedResults = popupParcel.kiwi_customSearchResults.servicesSearched[serviceInfoObject.name].results;
                    resultsSummaryArray.push("<a class='jumpTo' data-serviceindex='" + index + "'>" + serviceInfoObject.title + " (" + service_PreppedResults.length + ")</a>");
                    customSearchResultsHTML += tailorResults[serviceInfoObject.name](serviceInfoObject, service_PreppedResults, popupParcel.kiwi_userPreferences);
                    if (service_PreppedResults.length > 14) {
                      customSearchResultsHTML += '<div class="listing showHidden" data-servicename="' + serviceInfoObject.name + '"> show remaining ' + (service_PreppedResults.length - 11) + ' results</div>';
                    }
                  } else {
                    customSearchResultsHTML += '<br>No results for ' + serviceInfoObject.title + '<br>';
                  }
                }
              } else {
                customSearchResultsHTML += '<div id="customSearchResultsDrop"><br>No results to show... make a search! :) </div><br>';
              }
              customSearchResultsHTML = "<div style='width: 100%; text-align: center;font-size:.9em;'>" + resultsSummaryArray.join(" - ") + "</div>" + customSearchResultsHTML;
              customSearchResultsHTML += "<br>";
              $(_this.DOMselector).html(openedCustomSearchHTML);
              $(_this.DOMselector + " #customSearchResults").html(customSearchResultsHTML);
              $(_this.DOMselector + " .hidden_listing").hide();
              duplicateFixedHeight = function() {
                var fixedElHeight;
                fixedElHeight = $(_this.DOMselector + " .topSearchBar").outerHeight();
                if ((popupParcel.kiwi_userMessages != null) && popupParcel.kiwi_userMessages.length > 0) {
                  fixedElHeight += 70 + popupParcel.kiwi_userMessages.length * 60;
                }
                if (fixedElHeight === 0) {
                  return setTimeout(function() {
                    return duplicateFixedHeight();
                  }, 0);
                } else {
                  return $(_this.DOMselector + " .notFixed").css({
                    'height': fixedElHeight + "px"
                  });
                }
              };
              duplicateFixedHeight();
              return _this.Widgets.messageCenter.render('showMessages', popupParcel);
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var closeWidget, customSearchQueryInput, customSearchQuerySubmit, customSearch_sortByPref, elsServicesActivePrefs, elsServicesButtons, jumpToServiceCustomResults, modifySearch, sendSearch, showHidden;
              customSearchQueryInput = $(_this.DOMselector + " #customSearchQueryInput");
              customSearchQuerySubmit = $(_this.DOMselector + " #customSearchQuerySubmit");
              closeWidget = $(_this.DOMselector + ' #close__' + _this.name);
              customSearch_sortByPref = $(_this.DOMselector + " .conversations_sortByPref");
              modifySearch = $(_this.DOMselector + " .customSearchOpen");
              elsServicesButtons = $(_this.DOMselector + " button.servicesToSearch ");
              elsServicesActivePrefs = $(_this.DOMselector + " .customSearchServicePref input");
              showHidden = $(_this.DOMselector + " .showHidden");
              jumpToServiceCustomResults = $(_this.DOMselector + " #customSearchResults .jumpTo");
              _this.elsToUnbind = _this.elsToUnbind.concat(customSearchQueryInput, closeWidget, customSearchQuerySubmit, elsServicesButtons, customSearch_sortByPref, showHidden, jumpToServiceCustomResults, modifySearch);
              modifySearch.bind('click', function() {
                return $(this.DOMselector + " #customSearchQueryInput").focus();
              });
              jumpToServiceCustomResults.bind('click', function(ev) {
                var pxFromTop, serviceIndex;
                serviceIndex = parseInt($(ev.target).data('serviceindex'));
                pxFromTop = $($(_this.DOMselector + " #customSearchResults .serviceResultJumpTo")[serviceIndex]).offset().top;
                return $('body').scrollTop(pxFromTop - 100);
              });
              showHidden.bind('click', function(ev) {
                var serviceName;
                serviceName = $(ev.target).data('servicename');
                $(_this.DOMselector + " .resultsBox__" + serviceName + " .hidden_listing").show(1200);
                return $(ev.target).remove();
              });
              elsServicesButtons.bind('click', function(ev) {
                var ariaPressed, serviceName;
                if ($(ev.target).hasClass("dropdownLabel")) {
                  serviceName = $(ev.target).attr('data-serviceName');
                  ariaPressed = $(ev.target).attr('aria-pressed');
                  if (ariaPressed === 'true') {
                    $('button.dropDownPrefs_' + serviceName).removeClass('active');
                    $(_this.DOMselector + " input.tagPref_" + serviceName).attr('disabled', 'disabled');
                  } else {
                    $('button.dropDownPrefs_' + serviceName).addClass('active');
                    $(_this.DOMselector + " input.tagPref_" + serviceName).removeAttr('disabled');
                  }
                }
                return $(ev.target).blur();
              });
              customSearch_sortByPref.bind('change', function(ev) {
                var parcel;
                popupParcel.kiwi_userPreferences.sortByPref = $(ev.target).val();
                parcel = {
                  refreshView: 'conversations',
                  keyName: 'kiwi_userPreferences',
                  newValue: popupParcel.kiwi_userPreferences,
                  localOrSync: 'sync',
                  msg: 'kiwiPP_post_save_a_la_carte'
                };
                return sendParcel(parcel);
              });
              sendSearch = function() {
                var el, elTagPref, elTagPrefs, elsServicesToSearch, parcel, queryString, serviceName, servicesToSearch, tagName, _i, _j, _len, _len1;
                queryString = customSearchQueryInput.val();
                elsServicesToSearch = $(_this.DOMselector + ' button.servicesToSearch[aria-pressed="true"]');
                servicesToSearch = {};
                for (_i = 0, _len = elsServicesToSearch.length; _i < _len; _i++) {
                  el = elsServicesToSearch[_i];
                  serviceName = $(el).attr('data-serviceName');
                  servicesToSearch[serviceName] = {};
                  servicesToSearch[serviceName].customSearchTags = {};
                  elTagPrefs = $(_this.DOMselector + " input.tagPref_" + serviceName + ":checked");
                  for (_j = 0, _len1 = elTagPrefs.length; _j < _len1; _j++) {
                    elTagPref = elTagPrefs[_j];
                    tagName = $(elTagPref).val();
                    servicesToSearch[serviceName].customSearchTags[tagName] = {};
                  }
                }
                if (queryString !== '') {
                  parcel = {
                    msg: 'kiwiPP_post_customSearch',
                    customSearchRequest: {
                      queryString: queryString,
                      servicesToSearch: servicesToSearch
                    }
                  };
                  return sendParcel(parcel);
                }
              };
              customSearchQueryInput.keypress(function(event) {
                var charCode;
                charCode = event.keyCode ? event.keyCode : event.which;
                if (charCode === 13) {
                  return sendSearch();
                }
              });
              customSearchQuerySubmit.bind('click', function() {
                return sendSearch();
              });
              closeWidget.bind('click', function() {
                _this.widgetOpenBool = false;
                return _this.render('collapsed', popupParcel);
              });
              return customSearchQueryInput.focus();
            };
          })(this)
        }
      };
    };

    return CustomSearch;

  })(Widget);

  View = (function() {
    function View(_at_name, _at___renderStates__) {
      this.name = _at_name;
      this.__renderStates__ = _at___renderStates__;
      this.render = __bind(this.render, this);
      this.unbindView = __bind(this.unbindView, this);
      this.elsToUnbind = [];
      this.totalRenders = 0;
      this.DOMselector = "#" + this.name + "_View";
      this.Widgets = {};
      this.bindAllGoToViewButtons = (function(_this) {
        return function(viewData) {
          var els_goTo_view, viewValue, _results, _viewName;
          _results = [];
          for (_viewName in switchViews) {
            viewValue = switchViews[_viewName];
            els_goTo_view = $(_this.DOMselector + ' .goTo_' + _viewName + 'View');
            _this.elsToUnbind.push(els_goTo_view);
            _results.push(bindGoToViewButtons(els_goTo_view, _viewName, viewData));
          }
          return _results;
        };
      })(this);
      this.renderStates = this.__renderStates__();
      return this;
    }

    View.prototype.unbindView = function() {
      var el, widget, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.elsToUnbind;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        el.unbind();
      }
      this.elsToUnbind = [];
      _ref1 = this.Widgets;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        widget = _ref1[_j];
        _results.push(widget.unbindWidget());
      }
      return _results;
    };

    View.prototype.render = function(popupParcel, renderState) {
      if (renderState == null) {
        renderState = "__normal__";
      }
      this.totalRenders++;
      this.unbindView(this.name);
      if ((renderState == null) && (this.renderStates.__normal__ == null)) {
        if (typeof console !== "undefined" && console !== null) {
          console.log('ERROR: must declare renderState for view ' + this.name + ' since __normal__ undefined');
        }
      }
      this.renderStates[renderState].paint(popupParcel);
      this.bindAllGoToViewButtons(popupParcel);
      return this.renderStates[renderState].bind(popupParcel);
    };

    return View;

  })();

  FixedView = (function(_super) {
    __extends(FixedView, _super);

    function FixedView(_at_name, _at___renderStates__, uniqueSelectorPostfix) {
      this.name = _at_name;
      this.__renderStates__ = _at___renderStates__;
      FixedView.__super__.constructor.call(this, this.name, this.__renderStates__);
      this.DOMselector += uniqueSelectorPostfix;
    }

    return FixedView;

  })(View);

  SwitchView = (function(_super) {
    __extends(SwitchView, _super);

    function SwitchView(_at_name, _at___renderStates__) {
      this.name = _at_name;
      this.__renderStates__ = _at___renderStates__;
      this.render = __bind(this.render, this);
      this.showView = __bind(this.showView, this);
      SwitchView.__super__.constructor.call(this, this.name, this.__renderStates__);
    }

    SwitchView.prototype.showView = function() {
      var viewValue, _results, _viewName;
      _results = [];
      for (_viewName in switchViews) {
        viewValue = switchViews[_viewName];
        if (_viewName === this.name) {
          _results.push($('#' + _viewName + '_View').css({
            'display': 'block'
          }));
        } else {
          _results.push($('#' + _viewName + '_View').css({
            'display': 'none'
          }));
        }
      }
      return _results;
    };

    SwitchView.prototype.render = function(popupParcel, renderState) {
      if (renderState == null) {
        renderState = "__normal__";
      }
      SwitchView.__super__.render.call(this, popupParcel, renderState);
      return this.showView();
    };

    return SwitchView;

  })(View);

  Conversations = (function(_super) {
    __extends(Conversations, _super);

    function Conversations(_at_name) {
      this.name = _at_name;
      this.__renderStates__ = __bind(this.__renderStates__, this);
      Conversations.__super__.constructor.call(this, this.name, this.__renderStates__);
      this.Widgets = {
        customSearch: new CustomSearch('customSearch', this, false)
      };
    }

    Conversations.prototype.init = function(popupParcel) {
      this.unbindWidget();
      return this.render(popupParcel);
    };

    Conversations.prototype.__renderStates__ = function() {
      return {
        __normal__: {
          paint: (function(_this) {
            return function(popupParcel) {
              var brandedTitle, index, preppedHTMLstring, researchModeDisabledButtonsHTML, resultsHTML, resultsSummaryArray, serviceInfoObject, service_PreppedResults, submitTitle, submitUrl, totalResults, _i, _len, _ref;
              _this.Widgets['customSearch'].init(popupParcel);
              researchModeDisabledButtonsHTML = '';
              if (popupParcel.urlBlocked === true || popupParcel.kiwi_userPreferences.researchModeOnOff === 'off' || ((popupParcel.oldUrl != null) && popupParcel.oldUrl === true)) {
                researchModeDisabledButtonsHTML += "<br> <div style='width:100%;text-align: center;'><button class='btn btn-success' style='font-size: 1.1em;display: inline-block;' id='researchUrlOverride'>Research this Url</button></div> <br>";
              }
              if (popupParcel.kiwi_userPreferences.researchModeOnOff === 'off') {
                researchModeDisabledButtonsHTML += "<br> <div style='width:100%; text-align:center;'> Research Mode is off: &nbsp; <button class='goTo_userPreferencesView btn btn-xs btn-default' style='position:relative; bottom:2px;'> change settings </button> </div>";
              }
              $("#researchModeDisabledButtons").html(researchModeDisabledButtonsHTML);
              resultsSummaryArray = [];
              resultsHTML = "";
              totalResults = 0;
              _ref = popupParcel.kiwi_servicesInfo;
              for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                serviceInfoObject = _ref[index];
                if ((popupParcel.allPreppedResults[serviceInfoObject.name] != null) && popupParcel.allPreppedResults[serviceInfoObject.name].service_PreppedResults.length > 0) {
                  service_PreppedResults = popupParcel.allPreppedResults[serviceInfoObject.name].service_PreppedResults;
                  totalResults += service_PreppedResults.length;
                  brandedTitle = serviceInfoObject.name === 'reddit' ? "for " + serviceInfoObject.title : serviceInfoObject.title;
                  resultsSummaryArray.push("<a class='jumpTo' data-serviceindex='" + index + "'>" + brandedTitle + " (" + service_PreppedResults.length + ")</a>");
                  resultsHTML += tailorResults[serviceInfoObject.name](serviceInfoObject, service_PreppedResults, popupParcel.kiwi_userPreferences);
                  if (service_PreppedResults.length > 14) {
                    resultsHTML += '<div class="listing showHidden" data-servicename="' + serviceInfoObject.name + '"> show remaining ' + (service_PreppedResults.length - 11) + ' results</div>';
                  }
                } else {
                  if (serviceInfoObject.active === 'on') {
                    if (serviceInfoObject.submitTitle != null) {
                      submitUrl = serviceInfoObject.submitUrl;
                      submitTitle = serviceInfoObject.submitTitle;
                      resultsHTML += '<div class="serviceResultJumpTo">No conversation matches for ' + serviceInfoObject.title + '... <br> &nbsp;&nbsp;&nbsp;<a target="_blank" href="' + submitUrl + '">' + submitTitle + '</a></div><br>';
                    } else {
                      resultsHTML += '<div>No results for ' + serviceInfoObject.title + '</div>';
                    }
                  } else {
                    resultsHTML += '<div>' + serviceInfoObject.title + ' has been toggled "off" in settings. <br> &nbsp;&nbsp;&nbsp;<button class="goTo_userPreferencesView btn btn-xs btn-default" style="position:relative; bottom:2px;"> go to settings </button> to toggle back on. </div>';
                  }
                }
              }
              preppedHTMLstring = '';
              if (popupParcel.urlBlocked === true && Object.keys(popupParcel.allPreppedResults).length < 2) {
                preppedHTMLstring += "<div style='width: 100%; text-align: justify; padding:20px; font-size:.9em; opacity:.9;'> <em> Certain super-high traffic URLs (or weird urls (like 'about:config' and chrome new tab pages)) have been excluded from auto-search out of respect for the APIs of the conversation sites. you can still manually search them by hitting the green button </em> </div><br>";
              } else if ((totalResults > 0 && popupParcel.kiwi_userPreferences.researchModeOnOff === 'off') || popupParcel.kiwi_userPreferences.researchModeOnOff === 'on' || Object.keys(popupParcel.allPreppedResults).length > 1) {
                preppedHTMLstring = '<br><h3 style="position:relative; top:-10px;">Results for this URL:</h3>';
                preppedHTMLstring += "<div style='width: 100%; text-align: center;font-size:.9em;'>" + resultsSummaryArray.join(" - ") + "</div><br>";
                preppedHTMLstring += resultsHTML;
              }
              $("#resultsByService").html(preppedHTMLstring);
              $(_this.DOMselector + " .hidden_listing").hide();
              if (totalResults < 4 && _this.totalRenders < 4) {
                fixedViews.kiwiSlice.render(popupParcel, "open");
              }
              setTimeout(function() {
                $($('input')[0]).blur();
                $($('a')[0]).blur();
                return $($('button')[0]).blur();
              }, 300);
              $($('input')[0]).blur();
              $($('a')[0]).blur();
              return $($('button')[0]).blur();
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var conversations_sortByPref, customSearchOpen, jumpToService, researchUrlOverrideButton, showHidden;
              showHidden = $(_this.DOMselector + " .showHidden");
              researchUrlOverrideButton = $(_this.DOMselector + " #researchUrlOverride");
              conversations_sortByPref = $(_this.DOMselector + " .conversations_sortByPref");
              customSearchOpen = $(_this.DOMselector + " .customSearchOpen");
              jumpToService = $(_this.DOMselector + " #resultsByService .jumpTo");
              _this.elsToUnbind = _this.elsToUnbind.concat(conversations_sortByPref, showHidden, researchUrlOverrideButton, customSearchOpen, jumpToService);
              jumpToService.bind('click', function(ev) {
                var pxFromTop, serviceIndex;
                serviceIndex = parseInt($(ev.target).data('serviceindex'));
                pxFromTop = $($(_this.DOMselector + " #resultsByService .serviceResultJumpTo")[serviceIndex]).offset().top;
                return $('body').scrollTop(pxFromTop - 100);
              });
              customSearchOpen.bind('click', function() {
                return $("#customSearchQueryInput").click();
              });
              researchUrlOverrideButton.bind('click', function() {
                var parcel;
                parcel = {
                  msg: 'kiwiPP_researchUrlOverrideButton'
                };
                return sendParcel(parcel);
              });
              showHidden.bind('click', function(ev) {
                var serviceName;
                serviceName = $(ev.target).data('servicename');
                $(_this.DOMselector + " .resultsBox__" + serviceName + " .hidden_listing").show(1200);
                return $(ev.target).remove();
              });
              return conversations_sortByPref.bind('change', function(ev) {
                var parcel;
                popupParcel.kiwi_userPreferences.sortByPref = $(ev.target).val();
                parcel = {
                  refreshView: 'conversations',
                  keyName: 'kiwi_userPreferences',
                  newValue: popupParcel.kiwi_userPreferences,
                  localOrSync: 'sync',
                  msg: 'kiwiPP_post_save_a_la_carte'
                };
                return sendParcel(parcel);
              });
            };
          })(this)
        }
      };
    };

    return Conversations;

  })(SwitchView);

  UserPreferences = (function(_super) {
    __extends(UserPreferences, _super);

    function UserPreferences(_at_name) {
      this.name = _at_name;
      this.__renderStates__ = __bind(this.__renderStates__, this);
      UserPreferences.__super__.constructor.call(this, this.name, this.__renderStates__);
    }

    UserPreferences.prototype.init = function(popupParcel) {
      this.unbindWidget();
      return this.render(popupParcel);
    };

    UserPreferences.prototype.__renderStates__ = function() {
      return {
        __normal__: {
          paint: (function(_this) {
            return function(popupParcel) {
              var activeCheck, autoOffTimerType, autoOffTimerValue, brandedTitle, brandingImage, currentTime, customSearchApiBrandingHTML, index, notActiveCheck, researchModeHtml, researchOffString, researchOnString, service, servicesHtml, specificAPIlink, timerDisabled, timerOnlyUsefulWhenMessage, whitelistSubString, _i, _j, _len, _len1, _ref, _ref1;
              $(_this.DOMselector + " .userErrMsg").html('');
              if (preferencesOnlyPage === true) {
                $("#menuBar_preferences").hide();
              }
              currentTime = Date.now();
              if (popupParcel.kiwi_userPreferences.researchModeOnOff === "off") {
                $("#autoOffTimer").html("Research mode is off, so auto-off timer is not set");
              } else if ((popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp != null) && popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp > currentTime) {
                $("#autoOffTimer").html("Auto-Off timer expires at: " + formatTime(popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp) + "<br>");
              } else if (popupParcel.kiwi_userPreferences.researchModeOnOff === 'off' && (popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp != null)) {
                $("#autoOffTimer").html("Auto-off timer last expired at: " + formatTime(popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp) + "<br>");
              } else {
                $("#autoOffTimer").html("Auto-off timer is not set");
              }
              researchModeHtml = '';
              if (popupParcel.kiwi_userPreferences.researchModeOnOff === "on") {
                researchOnString = " checked='checked' ";
                researchOffString = "";
              } else {
                researchOnString = "";
                researchOffString = " checked='checked' ";
              }
              autoOffTimerType = popupParcel.kiwi_userPreferences.autoOffTimerType;
              autoOffTimerValue = popupParcel.kiwi_userPreferences.autoOffTimerValue;
              var auto20, auto60, autoAlways, autoCustom, autoCustomValue = '';
        if(autoOffTimerType != null){
          if(autoOffTimerType == "20"){ auto20 = " checked='checked' " }
          else if(autoOffTimerType == "60"){ auto60 = " checked='checked' " }
          else if(autoOffTimerType == "always"){ autoAlways = " checked='checked' " }
          else if(autoOffTimerType == "custom"){ autoCustom = " checked='checked' "; autoCustomValue = autoOffTimerValue;}
        };
              researchModeHtml += 'Research Mode: <a class="tooltipCustom" style="position: relative;"> <div style="display:inline; font-size:.9em;"><sup><em> ?</em></sup></div> <span style="bottom:34px; left:-114px;"> When the Research mode is "Off", Kiwi won\'t automatically search URLs as you surf; instead, you can check URLs on a case-by-case basis (and still be able to do custom searches) </span> </a> <label style="font-weight: normal;" for="researchmodeON"> on </label> <input id="researchmodeON" type="radio" name="research" value="on" ' + researchOnString + '> - <label style="font-weight: normal;" for="researchmodeOFF"> off </label> <input id="researchmodeOFF" type="radio" name="research" value="off" ' + researchOffString + '> &nbsp;&nbsp;<button class="btn btn-mini btn-default userPreferencesSave"> save preferences </button><br>';
              if (popupParcel.kiwi_userPreferences.researchModeOnOff === 'off') {
                researchModeHtml += '';
                timerDisabled = ' disabled ';
                timerOnlyUsefulWhenMessage = '<br> <span style="font-size:.8em;"><i> &nbsp;&nbsp;Note: the auto-off-timer only matters when Research Mode is "on". </i></span> <br>';
              } else {
                timerDisabled = ' ';
                researchModeHtml += '<br> <span style="font-size:.8em;"><i> Note: The Whitelist only makes a difference when Research mode is turned "off", which it currently isn\'t. </i></span> <br>';
                timerOnlyUsefulWhenMessage = '';
              }
              researchModeHtml += '<br> <table class="table table-bordered table-striped whitelistTable"> <thead> <tr> <th colspan="3"> <div class="input-group" id="addWhiteListString"> <label class="input-group-addon"> <a class="tooltipCustom" style="position: relative;"> <div style="display:inline; font-size:.9em;">whitelist strings <sup><em> ?</em></sup></div> <span style="bottom:84px;left:-12px;"> <b>Whitelist strings:</b> <br> Kiwi will automatically research any URL (upon visiting) that contains a user-provided Whitelist string -- even when Research Mode is "off". Try it with "github.com" or "bitbucket.org", and then visit the respective site with research mode "off". </span> </a> </label> <input type="text" class="form-control ignoreSaveButtonListen"> <label class="input-group-addon btn btn-default"> add </label> </div> </th> </tr> </thead> <tbody>';
              _ref = popupParcel.kiwi_userPreferences.urlSubstring_whitelists.anyMatch;
              for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                whitelistSubString = _ref[index];
                researchModeHtml += '<tr> <th scope="row" style="width:35px;"> ' + (index + 1) + ' </th> <td> ' + whitelistSubString + ' </td> <td style="width:35px;"> <button class="btn btn-xs btn-default removeWhitelistString" data-whitelistStringToRemove="' + whitelistSubString + '" > <span title="remove" data-whitelistStringToRemove="' + whitelistSubString + '" class="glyphicon glyphicon-remove" aria-hidden="true" style="color:#E65F5F;" ></span> </button> </td> </tr>';
              }
              researchModeHtml += '</tbody> </table> <br>Auto-Off Timer set for: ' + timerOnlyUsefulWhenMessage + '<br>&nbsp; &nbsp;<label><input ' + timerDisabled + ' type="radio" name="researchAutoOffType" ' + auto20 + ' value="20"> 20 min</label> <br>&nbsp; &nbsp;<label><input ' + timerDisabled + ' type="radio" name="researchAutoOffType" ' + auto60 + ' value="60"> 1 hr</label> <br>&nbsp; &nbsp;<label><input ' + timerDisabled + ' type="radio" name="researchAutoOffType" ' + autoAlways + ' value="always"> Always On</label> <br>&nbsp; &nbsp;<label><input ' + timerDisabled + ' type="radio" name="researchAutoOffType" ' + autoCustom + ' value="custom"> Custom</label> &nbsp; &nbsp; <input ' + timerDisabled + ' id="autoCustomValue" type="text" value="' + autoCustomValue + '" size="4" disabled /> minutes';
              $("#researchModeDrop").html(researchModeHtml);
              servicesHtml = '';
              _ref1 = popupParcel.kiwi_servicesInfo;
              for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
                service = _ref1[index];
                if (service.active === "on") {
                  activeCheck = " checked='checked' ";
                  notActiveCheck = "";
                } else {
                  activeCheck = "";
                  notActiveCheck = " checked='checked' ";
                }
                servicesHtml += '<br> <div class="serviceListing listing"> <table><tbody><tr> <td class="upDownButtons">';
                if (index !== 0) {
                  servicesHtml += '<span title="Move ' + service.title + ' results above ' + popupParcel.kiwi_servicesInfo[index - 1].title + '" class="glyphicon glyphicon-chevron-up" id="' + service.name + '_moveServiceUp" aria-hidden="true"></span>';
                }
                if (index !== 0 && index !== popupParcel.kiwi_servicesInfo.length - 1) {
                  servicesHtml += '<br><br>';
                }
                if (index !== popupParcel.kiwi_servicesInfo.length - 1) {
                  servicesHtml += '<span title="Move ' + service.title + ' results below ' + popupParcel.kiwi_servicesInfo[index + 1].title + '"  class="glyphicon glyphicon-chevron-down" id="' + service.name + '_moveServiceDown" aria-hidden="true"></span>';
                }
                brandedTitle = service.name === 'reddit' ? "for " + service.title : service.title;
                brandingImage = '';
                if (service.brandingImage != null) {
                  brandingImage = "&nbsp;<a target='_blank' href='" + service.broughtToYouByURL + "' style='text-decoration:none;'> <img height='28' src='" + service.brandingImage + "'/></a>&nbsp;";
                }
                servicesHtml += '</td> <td class="serviceInfo">' + brandedTitle + ' - using: ' + brandingImage + ' <a target="_blank" href="' + service.broughtToYouByURL + '">' + service.broughtToYouByTitle + '</a><br>';
                if (service.name === "productHunt") {
                  specificAPIlink = ", <a target='_blank' href='https://github.com/producthunt/producthunt-api/wiki/Product-Hunt-APIs#algolia-search-api'>for PH</a>";
                }
                if (service.customSearchBroughtToYouByTitle != null) {
                  customSearchApiBrandingHTML = "<div class='bg-warning' style='margin:4px; margin-top:10px;padding:6px;'> <em><div style='padding-bottom:2px;'>&nbsp;&nbsp;&nbsp;&nbsp;custom searches are using: </div>" + '<div style="padding-bottom:4px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a target="_blank" href="' + service.customSearchBroughtToYouByURL + '">' + service.customSearchBroughtToYouByTitle + '</a>' + specificAPIlink + '</em> </div> </em> </div>';
                } else {
                  customSearchApiBrandingHTML = "";
                }
                servicesHtml += '<div style="padding-left:15px;"> status: <label style="font-weight: normal;" for="' + service.name + '_serviceStatusON"> on </label> <input id="' + service.name + '_serviceStatusON" type="radio" name="' + service.name + '_serviceStatus" value="on" ' + activeCheck + ' /> - <label style="font-weight: normal;" for="' + service.name + '_serviceStatusOFF"> off </label> <input id="' + service.name + '_serviceStatusOFF" type="radio" name="' + service.name + '_serviceStatus" value="off" ' + notActiveCheck + ' /> <br><br>Results are deemed notable (capitilizes badge letter) if:';
                if (service.name === 'gnews') {
                  servicesHtml += '<br><br> the topic has had <input id="' + service.name + '_numberOfStoriesFoundWithinTheHoursSincePostedLimit" type="text" size="4" value="' + service.notableConditions.numberOfStoriesFoundWithinTheHoursSincePostedLimit + '"/> or more related stories published within the last <input id="' + service.name + '_hoursNotable" type="text" size="4" value="' + service.notableConditions.hoursSincePosted + '"/> hours <br> <div style="width:100%; text-align:center;"><span style="padding:7px; margin-right: 280px; display: inline-block;"> - or - </span></div> number of News Clusters  <input id="' + service.name + '_numberOfRelatedItemsWithClusterURL" type="text" size="4" value="' + service.notableConditions.numberOfRelatedItemsWithClusterURL + '"/> </div>' + customSearchApiBrandingHTML + '</td> </tr></tbody></table> </div>';
                } else {
                  servicesHtml += '<br> URL is an exact match, and: <br> it has been <input id="' + service.name + '_hoursNotable" type="text" size="4" value="' + service.notableConditions.hoursSincePosted + '"/> or fewer hours since posting <br> <div style="width:100%; text-align:center;"><span style="padding:7px; margin-right: 280px; display: inline-block;"> - or - </span></div> a post has <input id="' + service.name + '_commentsNotable" type="text" size="4" value="' + service.notableConditions.num_comments + '"/> or more comments </div>' + customSearchApiBrandingHTML + '</td> </tr></tbody></table> </div>';
                }
              }
              servicesHtml += "<div class='serviceListing listing' style='padding:15px; margin-top: 30px;'> Wouldn't it be awesome if we could add some more services to opt-in to?&nbsp;&nbsp; All that's needed are friendly APIs!&nbsp; <a href='https://twitter.com/spencenow' target='_blank'>Tweet me</a> if you're interested in adding one! </div> <br>";
              return $("#servicesInfoDrop").html(servicesHtml);
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var addWhitelistString_button, allInputs, autoTimerRadios, downButton, index, postError, removeWhitelistStringButtons, saveButtons, service, upButton, _bindDown, _bindUp, _i, _len, _ref;
              saveButtons = $(_this.DOMselector + " .userPreferencesSave");
              removeWhitelistStringButtons = $(_this.DOMselector + " .removeWhitelistString");
              autoTimerRadios = $(_this.DOMselector + " input:radio[name='researchAutoOffType']");
              allInputs = $(_this.DOMselector + ' input:not(.ignoreSaveButtonListen)');
              addWhitelistString_button = $(_this.DOMselector + " #addWhiteListString label");
              _this.elsToUnbind = _this.elsToUnbind.concat(allInputs, saveButtons, autoTimerRadios, removeWhitelistStringButtons, addWhitelistString_button);
              saveButtons.attr('disabled', 'disabled');
              allInputs.bind('change', function() {
                return $(".userPreferencesSave").removeAttr('disabled');
              });
              allInputs.bind('focus', function() {
                return $(".userPreferencesSave").removeAttr('disabled');
              });
              if ($("input:radio[name='researchAutoOffType']:checked").val() === 'custom') {
                $("#autoCustomValue").removeAttr('disabled');
              }
              autoTimerRadios.bind('change', function() {
                if ($("input:radio[name='researchAutoOffType']:checked").val() === 'custom') {
                  return $("#autoCustomValue").removeAttr('disabled');
                } else {
                  return $("#autoCustomValue").attr('disabled', 'disabled');
                }
              });
              _bindDown = function(downButton, index) {
                return downButton.bind('click', function() {
                  var parcel;
                  popupParcel.kiwi_servicesInfo = moveArrayElement(popupParcel.kiwi_servicesInfo, index, index + 1);
                  parcel = {
                    refreshView: 'userPreferences',
                    keyName: 'kiwi_servicesInfo',
                    newValue: popupParcel.kiwi_servicesInfo,
                    localOrSync: 'sync',
                    msg: 'kiwiPP_post_save_a_la_carte'
                  };
                  return sendParcel(parcel);
                });
              };
              _bindUp = function(upButton, index) {
                return upButton.bind('click', function() {
                  var parcel;
                  popupParcel.kiwi_servicesInfo = moveArrayElement(popupParcel.kiwi_servicesInfo, index, index - 1);
                  parcel = {
                    refreshView: 'userPreferences',
                    keyName: 'kiwi_servicesInfo',
                    newValue: popupParcel.kiwi_servicesInfo,
                    localOrSync: 'sync',
                    msg: 'kiwiPP_post_save_a_la_carte'
                  };
                  return sendParcel(parcel);
                });
              };
              _ref = popupParcel.kiwi_servicesInfo;
              for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                service = _ref[index];
                downButton = $("#" + service.name + '_moveServiceDown');
                if (downButton.length > 0) {
                  _this.elsToUnbind.push(downButton);
                  _bindDown(downButton, index);
                }
                upButton = $("#" + service.name + '_moveServiceUp');
                if (upButton.length > 0) {
                  _this.elsToUnbind.push(upButton);
                  _bindUp(upButton, index);
                }
              }
              postError = function(userErrMsg) {
                return $(_this.DOMselector + " .userErrMsg").html("<br>" + userErrMsg);
              };
              removeWhitelistStringButtons.bind('click', function(ev) {
                var newWhitelistAnyMatchArray, parcel, whitelistSubString;
                whitelistSubString = $(ev.target).attr('data-whitelistStringToRemove');
                newWhitelistAnyMatchArray = _.without(popupParcel.kiwi_userPreferences.urlSubstring_whitelists.anyMatch, whitelistSubString);
                popupParcel.kiwi_userPreferences.urlSubstring_whitelists.anyMatch = newWhitelistAnyMatchArray;
                parcel = {
                  refreshView: 'userPreferences',
                  keyName: 'kiwi_userPreferences',
                  newValue: popupParcel.kiwi_userPreferences,
                  localOrSync: 'sync',
                  msg: 'kiwiPP_post_save_a_la_carte'
                };
                return sendParcel(parcel);
              });
              addWhitelistString_button.bind('click', function(ev) {
                var parcel, whitelistSubString_toAdd;
                whitelistSubString_toAdd = $(_this.DOMselector + " #addWhiteListString input").val();
                popupParcel.kiwi_userPreferences.urlSubstring_whitelists.anyMatch.push(whitelistSubString_toAdd);
                parcel = {
                  refreshView: 'userPreferences',
                  keyName: 'kiwi_userPreferences',
                  newValue: popupParcel.kiwi_userPreferences,
                  localOrSync: 'sync',
                  msg: 'kiwiPP_post_save_a_la_carte'
                };
                return sendParcel(parcel);
              });
              return saveButtons.bind('click', function() {
                var active, allowedAutoOffTypes, autoOffTimerType, autoOffTimerValue, hoursSincePosted, num_comments, numberOfRelatedItemsWithClusterURL, numberOfStoriesFoundWithinTheHoursSincePostedLimit, parcel, researchModeHTMLval, _j, _k, _len1, _len2, _ref1, _ref2;
                researchModeHTMLval = $("input:radio[name='research']:checked").val();
                if (researchModeHTMLval !== 'on' && researchModeHTMLval !== 'off') {
                  postError('research mode must be "on" or "off"');
                  return 0;
                }
                allowedAutoOffTypes = ["20", "60", "always", "custom"];
                autoOffTimerType = $("input:radio[name='researchAutoOffType']:checked").val();
                autoOffTimerValue = $("#autoCustomValue").val();
                if (__indexOf.call(allowedAutoOffTypes, autoOffTimerType) >= 0) {
                  if (autoOffTimerType === 'custom' && (autoOffTimerValue === '' || isNaN(autoOffTimerValue))) {
                    postError('Must specify a number of minutes for auto-off timer.');
                    return 0;
                  }
                } else {
                  postError('not acceptable autoOffTimerType');
                  return 0;
                }
                _ref1 = popupParcel.kiwi_servicesInfo;
                for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
                  service = _ref1[index];
                  if (service.name === 'gnews') {
                    active = $("input:radio[name='" + service.name + "_serviceStatus']:checked").val();
                    if (active !== 'on' && active !== 'off') {
                      postError('active must be "on" or "off"');
                      return 0;
                    }
                    numberOfStoriesFoundWithinTheHoursSincePostedLimit = $('#' + service.name + '_numberOfStoriesFoundWithinTheHoursSincePostedLimit').val();
                    if (numberOfStoriesFoundWithinTheHoursSincePostedLimit === '' || isNaN(numberOfStoriesFoundWithinTheHoursSincePostedLimit)) {
                      postError('number Of Stories Found Within The Hours Since Posted Limit must be an integer');
                      return 0;
                    }
                    numberOfRelatedItemsWithClusterURL = $('#' + service.name + '_numberOfRelatedItemsWithClusterURL').val();
                    if (numberOfRelatedItemsWithClusterURL === '' || isNaN(numberOfRelatedItemsWithClusterURL)) {
                      postError('number Of Related Items With Cluster URL of comments must be an integer');
                      return 0;
                    }
                  } else {
                    active = $("input:radio[name='" + service.name + "_serviceStatus']:checked").val();
                    if (active !== 'on' && active !== 'off') {
                      postError('active must be "on" or "off"');
                      return 0;
                    }
                    hoursSincePosted = $('#' + service.name + '_hoursNotable').val();
                    if (hoursSincePosted === '' || isNaN(hoursSincePosted)) {
                      postError('Hours must be an number');
                      return 0;
                    }
                    num_comments = $('#' + service.name + '_commentsNotable').val();
                    if (num_comments === '' || isNaN(num_comments)) {
                      postError('Number of comments must be an integer');
                      return 0;
                    }
                  }
                }
                popupParcel.kiwi_userPreferences.researchModeOnOff = researchModeHTMLval;
                if (autoOffTimerType !== 'custom') {
                  popupParcel.kiwi_userPreferences.autoOffTimerType = autoOffTimerType;
                } else {
                  popupParcel.kiwi_userPreferences.autoOffTimerType = autoOffTimerType;
                  popupParcel.kiwi_userPreferences.autoOffTimerValue = parseFloat(autoOffTimerValue);
                }
                _ref2 = popupParcel.kiwi_servicesInfo;
                for (index = _k = 0, _len2 = _ref2.length; _k < _len2; index = ++_k) {
                  service = _ref2[index];
                  active = $("input:radio[name='" + service.name + "_serviceStatus']:checked").val();
                  popupParcel.kiwi_servicesInfo[index].active = active;
                  hoursSincePosted = $('#' + service.name + '_hoursNotable').val();
                  popupParcel.kiwi_servicesInfo[index].notableConditions.hoursSincePosted = parseFloat(hoursSincePosted);
                  if (service.name === 'gnews') {
                    numberOfRelatedItemsWithClusterURL = $('#' + service.name + '_numberOfRelatedItemsWithClusterURL').val();
                    popupParcel.kiwi_servicesInfo[index].notableConditions.numberOfRelatedItemsWithClusterURL = parseInt(numberOfRelatedItemsWithClusterURL);
                    numberOfStoriesFoundWithinTheHoursSincePostedLimit = $('#' + service.name + '_numberOfStoriesFoundWithinTheHoursSincePostedLimit').val();
                    popupParcel.kiwi_servicesInfo[index].notableConditions.numberOfStoriesFoundWithinTheHoursSincePostedLimit = parseInt(numberOfStoriesFoundWithinTheHoursSincePostedLimit);
                  } else {
                    num_comments = $('#' + service.name + '_commentsNotable').val();
                    popupParcel.kiwi_servicesInfo[index].notableConditions.num_comments = parseInt(num_comments);
                  }
                }
                popupParcel.view = 'userPreferences';
                parcel = {
                  refreshView: popupParcel.view,
                  newPopupParcel: popupParcel,
                  msg: 'kiwiPP_post_savePopupParcel'
                };
                return sendParcel(parcel);
              });
            };
          })(this)
        }
      };
    };

    return UserPreferences;

  })(SwitchView);

  Credits = (function(_super) {
    __extends(Credits, _super);

    function Credits(_at_name) {
      this.name = _at_name;
      this.__renderStates__ = __bind(this.__renderStates__, this);
      Credits.__super__.constructor.call(this, this.name, this.__renderStates__);
    }

    Credits.prototype.init = function(popupParcel) {
      this.unbindWidget();
      return this.render(popupParcel);
    };

    Credits.prototype.__renderStates__ = function() {
      return {
        __normal__: {
          paint: (function(_this) {
            return function(popupParcel) {
              return typeof console !== "undefined" && console !== null ? console.log('painting ' + _this.name) : void 0;
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              return typeof console !== "undefined" && console !== null ? console.log('binding ' + _this.name) : void 0;
            };
          })(this)
        }
      };
    };

    return Credits;

  })(SwitchView);

  Loading = (function(_super) {
    __extends(Loading, _super);

    function Loading(_at_name) {
      this.name = _at_name;
      this.__renderStates__ = __bind(this.__renderStates__, this);
      Loading.__super__.constructor.call(this, this.name, this.__renderStates__);
    }

    Loading.prototype.init = function(popupParcel) {
      this.unbindWidget();
      return this.render(popupParcel);
    };

    Loading.prototype.__renderStates__ = function() {
      return {
        __normal__: {
          paint: (function(_this) {
            return function(popupParcel) {
              return typeof console !== "undefined" && console !== null ? console.log('painting ' + _this.name) : void 0;
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              return typeof console !== "undefined" && console !== null ? console.log('binding ' + _this.name) : void 0;
            };
          })(this)
        }
      };
    };

    return Loading;

  })(SwitchView);

  KiwiSlice = (function(_super) {
    __extends(KiwiSlice, _super);

    function KiwiSlice(_at_name, uniqueSelectorPostfix) {
      this.name = _at_name;
      this.__renderStateTransitions__ = __bind(this.__renderStateTransitions__, this);
      this.__renderStates__ = __bind(this.__renderStates__, this);
      this.render = __bind(this.render, this);
      this.init = __bind(this.init, this);
      KiwiSlice.__super__.constructor.call(this, this.name, this.__renderStates__, uniqueSelectorPostfix);
    }

    KiwiSlice.prototype.init = function(popupParcel, renderState) {
      if (renderState == null) {
        renderState = null;
      }
      this.renderStateTransitions = this.__renderStateTransitions__();
      this.unbindView();
      renderState = renderState != null ? renderstate : "collapsed";
      return this.render(popupParcel, 'collapsed');
    };

    KiwiSlice.prototype.render = function(popupParcel, renderState, fromState) {
      var __renderStates__callback;
      if (fromState == null) {
        fromState = null;
      }
      __renderStates__callback = (function(_this) {
        return function(popupParcel, renderState) {
          return KiwiSlice.__super__.render.call(_this, popupParcel, renderState);
        };
      })(this);
      if ((fromState != null) && (this.renderStateTransitions[fromState + "__to__" + renderState] != null)) {
        return this.renderStateTransitions[fromState + "__to__" + renderState](popupParcel, renderState, __renderStates__callback);
      } else {
        return KiwiSlice.__super__.render.call(this, popupParcel, renderState);
      }
    };

    KiwiSlice.prototype.__renderStates__ = function() {
      return {
        collapsed: {
          paint: (function(_this) {
            return function(popupParcel) {
              var kiwiSliceHTML;
              kiwiSliceHTML = '<div id="sliceActivateTransition" style="position:fixed; bottom: -33px; right: -33px; "> <img style="width: 66px; height: 66px;" src="symmetricKiwi.png" /> </div>';
              return $(_this.DOMselector).html(kiwiSliceHTML);
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var elActivateTransition;
              elActivateTransition = $(_this.DOMselector + " #sliceActivateTransition");
              _this.elsToUnbind = _this.elsToUnbind.concat(elActivateTransition);
              elActivateTransition.bind('mouseover', function(ev) {
                return elActivateTransition.addClass('rotateClockwiseFull');
              });
              elActivateTransition.bind('mouseout', function(ev) {
                return elActivateTransition.removeClass('rotateClockwiseFull');
              });
              return elActivateTransition.bind('click', function(ev) {
                elActivateTransition.removeClass('rotateClockwiseFull');
                return _this.render(popupParcel, 'open', 'collapsed');
              });
            };
          })(this)
        },
        open: {
          paint: (function(_this) {
            return function(popupParcel) {
              var kiwiSliceHTML;
              kiwiSliceHTML = '<div id="transition_open_showMe" class="evenlySpacedContainer kiwiSliceOpenPlatter"> <button type="button" class=" goTo_creditsView btn btn-mini btn-default">credits</button> <a class="btn btn-mini btn-default" style="font-size:.8em;" target="_blank" href="http://www.metafruit.com/kiwi/">MetaFruit <span class="glyphicon glyphicon-apple"></span></a> <button class=" btn btn-mini btn-default" id="clearKiwiURLCache">clear cache</button> <button class=" btn btn-mini btn-default" id="refreshURLresults">refresh</button> </div> <div id="sliceActivateTransition" style="position:fixed; bottom: 15px; right: 15px; "> <img style="width: 66px; height: 66px;" src="symmetricKiwi.png" /> </div>';
              return $(_this.DOMselector).html(kiwiSliceHTML);
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var clearKiwiURLCacheButton, elActivateTransition, refreshURLresultsButton;
              elActivateTransition = $(_this.DOMselector + " #sliceActivateTransition");
              clearKiwiURLCacheButton = $(_this.DOMselector + " #clearKiwiURLCache");
              refreshURLresultsButton = $(_this.DOMselector + " #refreshURLresults");
              _this.elsToUnbind = _this.elsToUnbind.concat(elActivateTransition, refreshURLresultsButton, clearKiwiURLCacheButton);
              refreshURLresultsButton.bind('click', function() {
                var parcel;
                parcel = {
                  msg: 'kiwiPP_refreshURLresults'
                };
                return sendParcel(parcel);
              });
              $('body').mouseup(function(e) {
                var container;
                container = $(_this.DOMselector);
                if (!container.is(e.target) && container.has(e.target).length === 0) {
                  $('body').unbind('mouseup');
                  return _this.render(popupParcel, 'collapsed', 'open');
                }
              });
              elActivateTransition.bind('click', function(ev) {
                return _this.render(popupParcel, 'collapsed', 'open');
              });
              return clearKiwiURLCacheButton.bind('click', function() {
                var parcel;
                parcel = {
                  msg: 'kiwiPP_clearAllURLresults'
                };
                return sendParcel(parcel);
              });
            };
          })(this)
        }
      };
    };

    KiwiSlice.prototype.__renderStateTransitions__ = function() {
      return {
        'open__to__collapsed': (function(_this) {
          return function(popupParcel, renderState, __renderStates__callback) {
            $(_this.DOMselector + " #transition_open_showMe").animate({
              'opacity': 0
            }, 300);
            $(_this.DOMselector + " #sliceActivateTransition").addClass('rotateClockwise');
            return $(_this.DOMselector + " #sliceActivateTransition").animate({
              "bottom": '-33px',
              "right": "-33px"
            }, {
              duration: 500,
              complete: function() {
                return __renderStates__callback(popupParcel, renderState);
              }
            });
          };
        })(this),
        'collapsed__to__open': (function(_this) {
          return function(popupParcel, renderState, __renderStates__callback) {
            $(_this.DOMselector + " #sliceActivateTransition").addClass('rotateCounterClockwise');
            $(_this.DOMselector + " #sliceActivateTransition").animate({
              "bottom": '15px',
              "right": "15px"
            }, {
              duration: 500,
              complete: function() {
                return __renderStates__callback(popupParcel, renderState);
              }
            });
            $(_this.DOMselector).prepend('<div id="transition_open_showMe" class="evenlySpacedContainer kiwiSliceOpenPlatter" style="opacity: 0;"> <button type="button" class="goTo_creditsView btn btn-mini btn-default ">credits</button> <a class=" btn btn-mini btn-default" style="font-size:.8em;" target="_blank" href="http://www.metafruit.com/kiwi/">MetaFruit <span class="glyphicon glyphicon-apple"></span></a> <button class="btn btn-mini btn-default " id="clearKiwiURLCache">clear cache</button> <button class="btn btn-mini btn-default " id="refreshURLresults">refresh</button> </div>');
            return $(_this.DOMselector + " #transition_open_showMe").animate({
              'opacity': 1
            }, 499);
          };
        })(this)
      };
    };

    return KiwiSlice;

  })(FixedView);

  fixedViews = {
    kiwiSlice: new KiwiSlice('kiwiSlice', 'FixedBottom')
  };

  switchViews = {
    conversations: new Conversations('conversations'),
    userPreferences: new UserPreferences('userPreferences'),
    credits: new Credits('credits'),
    loading: new Loading('loading')
  };

  tailorResults = {
    gnews: function(serviceInfoObject, service_PreppedResults, kiwi_userPreferences) {
      var currentTime, index, listing, listingClass, preppedHTMLstring, recentTag, selectedString_attention, selectedString_recency, _i, _len, _time;
      currentTime = Date.now();
      preppedHTMLstring = "<div class='serviceResultsBox serviceResultJumpTo resultsBox__" + serviceInfoObject.name + "'> <div class='serviceResultsHeaderBar'> <span class='serviceResultsTitles'>" + serviceInfoObject.title + '</span> &nbsp;&nbsp;<a class="customSearchOpen"> modify search</a> <p>&nbsp&nbsp' + serviceInfoObject.brandingSlogan + '</p>';
      if (kiwi_userPreferences.sortByPref === 'attention') {
        selectedString_attention = 'selected';
        selectedString_recency = '';
      } else {
        selectedString_attention = '';
        selectedString_recency = 'selected';
      }
      preppedHTMLstring += '<div style="position: absolute;padding-top: 20px;top: 0px;right: 0px;">&nbsp;&nbsp; sorted by: <select class="conversations_sortByPref"> <option ' + selectedString_attention + ' id="_attention" value="attention">attention</option> <option ' + selectedString_recency + ' id="_recency" value="recency">recency</option> </select> </div> </div>';
      if ((service_PreppedResults != null) && service_PreppedResults.length > 0) {
        preppedHTMLstring += '<div style="padding:7px;"> &nbsp;&nbsp; Searched for: "<strong>' + service_PreppedResults[0].kiwi_searchedFor + '</strong>" </div>';
      }
      if (kiwi_userPreferences.sortByPref === 'attention') {
        service_PreppedResults = _.sortBy(service_PreppedResults, 'clusterUrl');
        service_PreppedResults.reverse();
      } else if (kiwi_userPreferences.sortByPref === 'recency') {
        service_PreppedResults = _.sortBy(service_PreppedResults, 'kiwi_created_at');
        service_PreppedResults.reverse();
      }
      for (index = _i = 0, _len = service_PreppedResults.length; _i < _len; index = ++_i) {
        listing = service_PreppedResults[index];
        listingClass = index > 10 && service_PreppedResults.length > 14 ? ' hidden_listing' : '';
        recentTag = currentTime - listing.kiwi_created_at < 1000 * 60 * 60 * 4 ? "<span class='recentListingTag'>Recent: </span>" : "";
        preppedHTMLstring += '<div class="listing ' + listingClass + '" style="position:relative;">' + recentTag + '<a class="listingTitle" target="_blank" href="' + listing.unescapedUrl + '"> <b>' + listing.titleNoFormatting + '</b><br>';
        _time = formatTime(listing.kiwi_created_at);
        preppedHTMLstring += listing.publisher + ' -- ' + _time + '</a> <br>' + listing.content + '<br>';
        if (listing.clusterUrl !== '') {
          preppedHTMLstring += '<a target="_blank" href="' + listing.clusterUrl + '"> Google News cluster </a>';
        }
        preppedHTMLstring += '</a> </div>';
      }
      preppedHTMLstring += "</div>";
      return preppedHTMLstring;
    },
    hackerNews: function(serviceInfoObject, service_PreppedResults, kiwi_userPreferences) {
      return tailorRedditAndHNresults_returnHtml(serviceInfoObject, service_PreppedResults, kiwi_userPreferences);
    },
    reddit: function(serviceInfoObject, service_PreppedResults, kiwi_userPreferences) {
      return tailorRedditAndHNresults_returnHtml(serviceInfoObject, service_PreppedResults, kiwi_userPreferences);
    },
    productHunt: function(serviceInfoObject, service_PreppedResults, kiwi_userPreferences) {
      var brandingDisplay, currentTime, fuzzyMatchBool, gridLayoutAuthorDiv, gridLayoutBool, index, listing, listingClass, maker, makerUsernames, preppedHTMLstring, recentTag, _i, _j, _len, _len1, _ref, _ref1, _time;
      preppedHTMLstring = '';
      currentTime = Date.now();
      fuzzyMatchBool = false;
      brandingDisplay = '';
      if (serviceInfoObject.brandingImage != null) {
        brandingDisplay = '<img style="margin-left:7px;" title="' + serviceInfoObject.title + '" height="28" src="' + serviceInfoObject.brandingImage + '"/> &nbsp;&nbsp; <span class="serviceResultsTitles" style="color:black; position: relative;top: 6px;">' + serviceInfoObject.title + '</span>';
      } else {
        brandingDisplay = "<span class='serviceResultsTitles'>" + serviceInfoObject.title + '</span>';
      }
      preppedHTMLstring += "<div class='serviceResultsBox serviceResultJumpTo resultsBox__" + serviceInfoObject.name + "'> <div class='serviceResultsHeaderBar'>" + brandingDisplay + "</div>";
      if (service_PreppedResults.length < 1) {
        preppedHTMLstring += ' no results <br>';
        return preppedHTMLstring;
      } else {
        service_PreppedResults = _.sortBy(service_PreppedResults, 'kiwi_num_comments');
        service_PreppedResults.reverse();
      }
      for (index = _i = 0, _len = service_PreppedResults.length; _i < _len; index = ++_i) {
        listing = service_PreppedResults[index];
        listingClass = index > 10 && service_PreppedResults.length > 14 ? ' hidden_listing ' : '';
        if (listing.comment_text != null) {
          preppedHTMLstring += _tailorHNcomment(listing, serviceInfoObject, listingClass);
        } else {
          if ((listing.kiwi_created_at != null) && currentTime - listing.kiwi_created_at < 1000 * 60 * 60 * 4) {
            recentTag = "<span class='recentListingTag'>Recent: </span>";
          } else {
            recentTag = "";
          }
          if (listing.kiwi_makers.length > 3) {
            gridLayoutBool = false;
          } else {
            gridLayoutBool = true;
          }
          preppedHTMLstring += '<div class="listing ' + listingClass + '">';
          if (gridLayoutBool) {
            preppedHTMLstring += '<div style="display:inline-table; width: 60%; padding-right:8px;">';
          } else {
            preppedHTMLstring += '<div>';
          }
          preppedHTMLstring += '<a class="listingTitle" target="_blank" href="' + listing.kiwi_discussion_url + '"> <div style="color:black; padding:4px; padding-bottom: 8px; font-size: 1.1em;">' + recentTag + '<b>' + listing.name + '</b> </div> <div style="color:#4D586F; padding-left:18px;"> <div style="padding-bottom:4px;">"' + listing.tagline + '"</div>';
          preppedHTMLstring += '<div style="padding-bottom:4px;">' + listing.kiwi_num_comments + ' comments, ' + listing.kiwi_score + ' upvotes </div>';
          if (listing.kiwi_created_at != null) {
            _time = formatTime(listing.kiwi_created_at);
            preppedHTMLstring += '' + _time;
          }
          preppedHTMLstring += '</div></a></div>';
          if (gridLayoutBool) {
            preppedHTMLstring += '<div style="display:inline-table; width: 39%;">';
          } else {
            preppedHTMLstring += '<div style="padding: 8px;">';
          }
          makerUsernames = [];
          if ((listing.kiwi_makers != null) && listing.kiwi_makers.length > 0) {
            preppedHTMLstring += '<div><div style="padding-bottom:2px;"><b>made by</b>: </div>';
            _ref = listing.kiwi_makers;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              maker = _ref[_j];
              if (gridLayoutBool) {
                preppedHTMLstring += '<div style="padding-bottom: 4px;">';
              } else {
                preppedHTMLstring += '<div style="padding-bottom: 4px; padding-left: 10px;">';
              }
              preppedHTMLstring += '<a target="_blank" href="' + serviceInfoObject.userPageBaselink + maker.username + '" style="color:#727E98;">' + maker.name;
              if ((maker.headline != null) && maker.headline !== "") {
                preppedHTMLstring += ', "' + maker.headline + '"';
              }
              preppedHTMLstring += '</a>';
              if (maker.website_url != null) {
                preppedHTMLstring += ' <a href="' + maker.website_url + '" target="_blank"><span class="glyphicon glyphicon-log-in" style="color:blue;"></span> </a>';
              }
              if (listing.kiwi_author_username === maker.username) {
                preppedHTMLstring += " (also submitted post)";
              }
              preppedHTMLstring += '</div>';
            }
            preppedHTMLstring += '</div>';
            makerUsernames.push(maker.username);
          }
          if (_ref1 = listing.kiwi_author_username, __indexOf.call(makerUsernames, _ref1) < 0) {
            if (gridLayoutBool) {
              gridLayoutAuthorDiv = '<div style="padding-bottom: 2px;">';
            } else {
              gridLayoutAuthorDiv = '<div style="padding-bottom: 2px; margin-left: 10px;">';
            }
            preppedHTMLstring += '<div style=""> <div style="padding-bottom:2px;"><b>submitted by:</b></div>' + gridLayoutAuthorDiv + '<a target="_blank" href="' + serviceInfoObject.userPageBaselink + listing.kiwi_author_username + '" style="color:#727E98;">' + listing.kiwi_author_name + '';
            if ((listing.kiwi_author_headline != null) && listing.kiwi_author_headline !== "") {
              preppedHTMLstring += ', "' + listing.kiwi_author_headline + '"';
            }
            preppedHTMLstring += '</a></div></div>';
          }
          preppedHTMLstring += '</div></div>';
        }
      }
      preppedHTMLstring += "</div>";
      return preppedHTMLstring;
    }
  };

  _tailorHNcomment = function(listing, serviceInfoObject, listingClass) {
    var commentHtml, currentTime, recentTag, _time;
    currentTime = Date.now();
    commentHtml = "";
    recentTag = currentTime - listing.kiwi_created_at < 1000 * 60 * 60 * 4 ? "<span class='recentListingTag'>Recent: </span>" : "";
    commentHtml += '<div class="listing ' + listingClass + ' " style="position:relative;">' + recentTag;
    if ((listing.over_18 != null) && listing.over_18 === true) {
      commentHtml += '<span class="nsfw">NSFW</span> For story: ' + listing.story_title + '<br>';
    } else {
      commentHtml += "For story: <a target='_blank' href='" + serviceInfoObject.permalinkBase + listing.story_id + "'>" + listing.story_title + '</a><br>';
    }
    _time = formatTime(listing.kiwi_created_at);
    commentHtml += 'at ' + _time + ', <a target="_blank" href="' + serviceInfoObject.userPageBaselink + listing.author + '">' + listing.author + '</a> recieved ' + listing.kiwi_score + ' upvotes, by saying: ( <a class="listingTitle" target="_blank" href="' + serviceInfoObject.permalinkBase + listing.kiwi_permaId + '"> comment permalink </a> , <a class="listingTitle" target="_blank" href="' + serviceInfoObject.permalinkBase + listing.story_id + '"> story permalink </a> )<br><div class="commentBox">' + listing.comment_text + '</div></div>';
    return commentHtml;
  };

  tailorRedditAndHNresults_returnHtml = function(serviceInfoObject, service_PreppedResults, kiwi_userPreferences) {
    var currentTime, fuzzyMatchBool, index, listing, listingClass, numberOfExactMatches, preppedHTMLstring, recentTag, selectedString_attention, selectedString_recency, _i, _j, _len, _len1, _time;
    preppedHTMLstring = '';
    currentTime = Date.now();
    fuzzyMatchBool = false;
    preppedHTMLstring += "<div class='serviceResultsBox serviceResultJumpTo resultsBox__" + serviceInfoObject.name + "'> <div class='serviceResultsHeaderBar'>";
    if (serviceInfoObject.name === 'reddit') {
      preppedHTMLstring += "<span class='serviceResultsTitles'>for " + serviceInfoObject.title + ':</span>';
    } else {
      preppedHTMLstring += "<span class='serviceResultsTitles'>" + serviceInfoObject.title + '</span>';
    }
    if (kiwi_userPreferences.sortByPref === 'attention') {
      selectedString_attention = 'selected';
      selectedString_recency = '';
    } else {
      selectedString_attention = '';
      selectedString_recency = 'selected';
    }
    preppedHTMLstring += '<div style="float:right; padding-top: 9px;"> &nbsp;&nbsp sorted by: <select class="conversations_sortByPref"> <option ' + selectedString_attention + ' id="_attention" value="attention">attention</option> <option ' + selectedString_recency + ' id="_recency" value="recency">recency</option> </select></div> </div>';
    if (service_PreppedResults.length < 1) {
      preppedHTMLstring += ' no results <br>';
      return preppedHTMLstring;
    } else if ((service_PreppedResults[0].comment_text == null) && kiwi_userPreferences.sortByPref === 'attention') {
      service_PreppedResults = _.sortBy(service_PreppedResults, 'kiwi_num_comments');
      service_PreppedResults.reverse();
    } else if (kiwi_userPreferences.sortByPref === 'attention') {
      service_PreppedResults = _.sortBy(service_PreppedResults, 'kiwi_score');
      service_PreppedResults.reverse();
    } else if (kiwi_userPreferences.sortByPref === 'recency') {
      service_PreppedResults = _.sortBy(service_PreppedResults, 'kiwi_created_at');
      service_PreppedResults.reverse();
    }
    for (index = _i = 0, _len = service_PreppedResults.length; _i < _len; index = ++_i) {
      listing = service_PreppedResults[index];
      listingClass = index > 10 && service_PreppedResults.length > 14 ? ' hidden_listing ' : '';
      if (listing.comment_text != null) {
        preppedHTMLstring += _tailorHNcomment(listing, serviceInfoObject, listingClass);
      } else {
        recentTag = currentTime - listing.kiwi_created_at < 1000 * 60 * 60 * 4 ? "<span class='recentListingTag'>Recent: </span>" : "";
        if (listing.kiwi_exact_match) {
          preppedHTMLstring += '<div class="listing ' + listingClass + '">';
          if (serviceInfoObject.name !== 'reddit') {
            preppedHTMLstring += '<div style="float:right;"> <a target="_blank" href="' + serviceInfoObject.userPageBaselink + listing.author + '"> by ' + listing.author + '</a> </div>';
          }
          preppedHTMLstring += '<a class="listingTitle" target="_blank" href="' + serviceInfoObject.permalinkBase + listing.kiwi_permaId + '"><span style="color:black;">' + recentTag;
          if ((listing.over_18 != null) && listing.over_18 === true) {
            preppedHTMLstring += '<span class="nsfw">NSFW</span> <b>' + listing.title + '</b><br>';
          } else {
            preppedHTMLstring += '<b>' + listing.title + '</b><br>';
          }
          _time = formatTime(listing.kiwi_created_at);
          preppedHTMLstring += listing.kiwi_num_comments + ' comments, ' + listing.kiwi_score + ' upvotes -- ' + _time + '</span></a>';
          if (listing.subreddit != null) {
            preppedHTMLstring += '<br><span> <a target="_blank" href="' + serviceInfoObject.permalinkBase + '/r/' + listing.subreddit + '"> subreddit: ' + listing.subreddit + '</a></span> <div style="float:right;"> <a target="_blank" href="' + serviceInfoObject.userPageBaselink + listing.author + '"> by ' + listing.author + '</a> </div>';
          }
          preppedHTMLstring += '<br></div>';
        } else {
          fuzzyMatchBool = true;
        }
      }
    }
    if (fuzzyMatchBool) {
      numberOfExactMatches = _.reduce(service_PreppedResults, function(memo, obj) {
        if (obj.kiwi_exact_match) {
          memo++;
          return memo;
        } else {
          return memo;
        }
      });
      if ((service_PreppedResults.length - numberOfExactMatches) > 10 && service_PreppedResults.length > 14) {
        listingClass = ' hidden_listing ';
      } else {
        listingClass = '';
      }
      preppedHTMLstring += '<div class="showFuzzyMatches ' + listingClass + '" style="position:relative;"> fuzzy matches: <br></div> <span class="fuzzyMatches">';
      for (index = _j = 0, _len1 = service_PreppedResults.length; _j < _len1; index = ++_j) {
        listing = service_PreppedResults[index];
        listingClass = index > 10 && service_PreppedResults.length > 14 ? ' hidden_listing ' : '';
        if (!listing.kiwi_exact_match) {
          recentTag = currentTime - listing.kiwi_created_at < 1000 * 60 * 60 * 4 ? "<span class='recentListingTag'>Recent: </span>" : "";
          preppedHTMLstring += '<div class="listing ' + listingClass + '">';
          if (serviceInfoObject.name !== 'reddit') {
            preppedHTMLstring += '<div style="float:right;"> <a target="_blank" href="' + serviceInfoObject.userPageBaselink + listing.author + '"> by ' + listing.author + '</a> </div>';
          }
          preppedHTMLstring += '<a class="listingTitle" target="_blank" href="' + serviceInfoObject.permalinkBase + listing.kiwi_permaId + '"><span style="color:black;">' + recentTag;
          if ((listing.over_18 != null) && listing.over_18 === true) {
            preppedHTMLstring += '<span class="nsfw">NSFW</span> <b>' + listing.title + '</b><br>';
          } else {
            preppedHTMLstring += '<b>' + listing.title + '</b><br>';
          }
          preppedHTMLstring += listing.kiwi_num_comments + ' comments, ' + listing.kiwi_score + ' upvotes ' + formatTime(listing.kiwi_created_at) + '</span> <br> for Url: <span class="altURL">' + listing.url + '</span> </a>';
          if (listing.subreddit != null) {
            preppedHTMLstring += '<br><span> <a target="_blank" href="' + serviceInfoObject.permalinkBase + '/r/' + listing.subreddit + '"> subreddit: ' + listing.subreddit + '</a></span> <div style="float:right;"> <a target="_blank" href="' + serviceInfoObject.userPageBaselink + listing.author + '"> by ' + listing.author + '</a></div>';
          }
          preppedHTMLstring += '<br></div>';
        }
      }
      preppedHTMLstring += "</span>";
    }
    preppedHTMLstring += "</div>";
    return preppedHTMLstring;
  };

  bindGoToViewButtons = function(buttonEls, viewName, viewData) {
    var el, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = buttonEls.length; _i < _len; _i++) {
      el = buttonEls[_i];
      _results.push($(el).bind('click', function(ev) {
        return switchViews[viewName].render(viewData);
      }));
    }
    return _results;
  };

  moveArrayElement = function(array, from, to) {
    array.splice(to, 0, array.splice(from, 1)[0]);
    return array;
  };

  getRandom = function(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  formatTime = function(utcMillisecondTimestamp) {
    var a, amOrPm, date, hour, min, month, months, sec, time, year;
    a = new Date(utcMillisecondTimestamp);
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    year = a.getFullYear();
    month = months[a.getMonth()];
    date = a.getDate();
    hour = a.getHours();
    min = a.getMinutes();
    sec = a.getSeconds();
    amOrPm = hour > 11 ? 'pm' : 'am';
    if (hour > 12) {
      hour = hour - 12;
    } else if (parseInt(hour) === 0) {
      hour = 12;
    }
    if (min < 10) {
      min = '0' + min;
    }
    time = month + ' ' + date + ', ' + year + ' - ' + hour + ':' + min + amOrPm;
    return time;
  };

  renderExtensionHeight = function(elementSelector, extraPx) {
    var extHeight_;
    if (viewElementId === elementSelector) {
      extraPx = 2;
      extHeight_ = $(elementSelector).outerHeight() + extraPx;
      if (extHeight_ > 590) {
        extHeight_ = 590;
      }
      $('body').css('height', extHeight_ + 'px');
      heightString = extHeight_.toString() +'px';
      $('html').css('min-height', heightString);
      extHeight_--;
      return $('body').css('min-height', heightString);
    }
  };

  capitalizeFirstLetter = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  htmlEntities = function(str) {
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
  };

  getURLParam = function(oTarget, sVar) {
    return decodeURI(oTarget.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURI(sVar).replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
  };

  receiveParcel = function(parcel) {
    if (parcel.msg == null) {
      return false;
    }
    switch (parcel.msg) {
      case 'kiwiPP_popupParcel_ready':
        return browser.tabs.query({
          currentWindow: true,
          active: true
        }, function(tabs) {
          var tabUrl;
          if (tabs.length > 0 && tabs[0].status === "complete") {
            if (tabs[0].url.indexOf('chrome-devtools://') !== 0) {
              tabUrl = tabs[0].url;
              if (tabs[0].url === parcel.forUrl) {
                return initialize(parcel.popupParcel);
              }
            } else {
              return 0;
            }
          }
        });
    }
  };

  sendParcel = function(parcel) {
    var port;
    port = browser.runtime.connect({
      name: "kiwi_fromBackgroundToPopup"
    });
    return browser.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      if (tabs.length > 0 && tabs[0].status === "complete") {
        if (tabs[0].url.indexOf('chrome-devtools://') !== 0) {
          parcel.forUrl = tabs[0].url;
          if (parcel.msg == null) {
            return false;
          }
          switch (parcel.msg) {
            case 'kiwiPP_refreshSearchQuery':
              return port.postMessage(parcel);
            case 'kiwiPP_acknowledgeMessage':
              return port.postMessage(parcel);
            case 'kiwiPP_post_customSearch':
              return port.postMessage(parcel);
            case 'kiwiPP_request_popupParcel':
              return port.postMessage(parcel);
            case 'kiwiPP_post_savePopupParcel':
              return port.postMessage(parcel);
            case 'kiwiPP_post_save_a_la_carte':
              return port.postMessage(parcel);
            case 'kiwiPP_clearAllURLresults':
              return port.postMessage(parcel);
            case 'kiwiPP_refreshURLresults':
              return port.postMessage(parcel);
            case 'kiwiPP_researchUrlOverrideButton':
              return port.postMessage(parcel);
          }
        } else {
          return 0;
        }
      }
    });
  };

  browser.runtime.onConnect.addListener(function(port) {
    if (port.name === 'kiwi_fromBackgroundToPopup') {
      return port.onMessage.addListener(function(pkg) {
        return receiveParcel(pkg);
      });
    }
  });

  sendParcel({
    'msg': 'kiwiPP_request_popupParcel'
  });

}).call(this);
